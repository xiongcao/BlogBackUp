{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixin.png","path":"images/weixin.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/xiaoxiong.png","path":"images/xiaoxiong.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1496840249461},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1496840249461},{"_id":"source/favicon.ico","hash":"0ac270496904d2081feb4711e9dd2e2996094b2e","modified":1528180732145},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1496840249462},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1496840249462},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1496840249463},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1496840249463},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1496840249463},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1496840249464},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1496840249464},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1496840249465},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1496840249465},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1496840249466},{"_id":"themes/next/_config.yml","hash":"4982b0ddabbf1664b8093bca6e717461baa01ec9","modified":1533692113381},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1496840249467},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1496840249468},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1496840249522},{"_id":"source/CNAME","hash":"3e0068ac2637bea3f0db66eb9b0927dc076b6017","modified":1496840250435},{"_id":"source/_posts/Markdown.md","hash":"707f3fcc89019b0ce4edc2034d936bd0d9d171ac","modified":1531971698181},{"_id":"source/_posts/Qiniu-image-tool-实现图片一键上传七牛云.md","hash":"ca0cc85d245de25ad8776f3df5d97fb46e1abc06","modified":1533722903156},{"_id":"source/_posts/essionStorage和localStorage解释及区别.md","hash":"9c06264a1b5f074ba0bdfe0e510d0863cc9ed417","modified":1533722538104},{"_id":"source/_posts/git常用命令.md","hash":"6dd6de2275702e044828eb7d0edc49a29a541098","modified":1533722858580},{"_id":"source/_posts/js Date对象的详细使用.md","hash":"db7c21e3d915959d8aa548afdd4bf78622ff3b13","modified":1533722884001},{"_id":"source/_posts/js-将对象数组中具有相同值的对象取出组成新的数组.md","hash":"e3b83e7644c6dd9caf7e75c9b5df959cb0cb25f8","modified":1533723080333},{"_id":"source/_posts/js经典算法.md","hash":"b03d05db9d170392adc9396449d0cd09d18351b0","modified":1533723050838},{"_id":"source/_posts/js跳出循环总结.md","hash":"72118ee6b32fff5471abac79cda3386f91ff0d39","modified":1533722898870},{"_id":"source/_posts/ss3伪类选择器nth-child和nth-of-type的区别.md","hash":"dd5dd6fb2ca3e86200772ced9b0f92618f6a20e9","modified":1533722910023},{"_id":"source/categories/index.md","hash":"b3348d12132b6666cc96d3f1a55f44f777d8206e","modified":1496664855341},{"_id":"source/_posts/使用gulp自动化构建前端项目.md","hash":"5e552c8a19006e81e5840b56185c117a4a8ab97b","modified":1533722927162},{"_id":"source/_posts/使用gulp插件快速开发项目.md","hash":"f539fdf1b3118173d256ae8e8886d1527a00f859","modified":1533722921610},{"_id":"source/_posts/Jquery-Dom元素Index-方法的使用.md","hash":"11d6f3777e0d753099783b167ab0656245dbf85c","modified":1533722879662},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496662524972},{"_id":"themes/next/.git/ORIG_HEAD","hash":"53030aa0dab4693b7232641f37a6338b84e65281","modified":1533631363698},{"_id":"themes/next/.git/FETCH_HEAD","hash":"0708d616ba38bfcb352ce63e744899d4e042d7b5","modified":1533631363538},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1496662524983},{"_id":"themes/next/.git/index","hash":"19bd81e05cf77d761ffcbbbb43d07fdcf19ba2e2","modified":1533717031182},{"_id":"themes/next/.git/packed-refs","hash":"a32afd28771f40635f4d5f53c889113239877db8","modified":1496662524964},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496662472147},{"_id":"themes/next/.git/tortoisegit.index","hash":"d07005a9201e533df8db6e4c2309eca21fe62256","modified":1533630658277},{"_id":"source/tags/index.md","hash":"ebcbd8a32ad9ca4eb0a39f9ae0c2aa46dad76925","modified":1496664792432},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1496840249469},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1496840249469},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1496840249470},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1496840249471},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1496840249471},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1496840249472},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1496840249473},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1496840249473},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1496840249473},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1496840249474},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1496840249475},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1496840249475},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1496840249476},{"_id":"themes/next/layout/_layout.swig","hash":"4f0ace15f1a24ad0a1f88724bbbec8b68a664598","modified":1496840249478},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1496840249519},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1496840249519},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1496840249520},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1496840249521},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1496840249521},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1496840249521},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1496840249522},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1496840249523},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1496840249524},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1496674179250},{"_id":"themes/next/source/favicon.ico","hash":"0ac270496904d2081feb4711e9dd2e2996094b2e","modified":1528180732145},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1496840250394},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1496840250395},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1496840250411},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1496662525008},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1496662525009},{"_id":"themes/next/.git/tortoisegit.data","hash":"404514af5315fb2487d87e836594526d6cf16889","modified":1533630658280},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249600},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496662472160},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1496840249477},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1496840249477},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1496840249479},{"_id":"themes/next/layout/_macro/post.swig","hash":"68d3bdda5cb0919f4932bcae61ecb2e5b482388b","modified":1496843465978},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1496840249479},{"_id":"themes/next/layout/_macro/reward.swig","hash":"d58f685e46875d2fc957b9e4eadc43b9d70ce081","modified":1496933707582},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4b029551ddb44c53f895e96cf8ff5ffbe02322fb","modified":1496840249481},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1496840249482},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a117d70265bdf5da86926690ad58245f4e8b08ec","modified":1533698755692},{"_id":"themes/next/layout/_partials/footer.swig","hash":"93f258b4e1c4a495e75563d4d4fa63c9a4b82822","modified":1496844959530},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1496840249484},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1496840249486},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1496840249486},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1496840249487},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1496840249487},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1496840249493},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1533698666380},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1496840249498},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1496840249511},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1496840249511},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1496840249512},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1496840249512},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1496840249513},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1496840249513},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1496840249525},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1496840249526},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1496840249526},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1496840249527},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1496840249528},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1496840249529},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1496840249528},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1496840249600},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1496840249612},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496840249646},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496840249647},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496840249665},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496840249702},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496840249704},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496840249708},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496840249711},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496840249728},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496840249729},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496840249731},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1496840249733},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1496840249735},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496840249736},{"_id":"themes/next/.git/logs/HEAD","hash":"d503f561e83816239bdcb5a35ac66eca47458eb1","modified":1496662524978},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1496662472149},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496662472153},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1496662472154},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496662472150},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1496662472156},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496662472157},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496662472157},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496662472155},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1496662472158},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249495},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249496},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249574},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249575},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249574},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496840249596},{"_id":"themes/next/source/images/weixin.png","hash":"f3c98f05125b5009413427f62d3cb655fc57d055","modified":1496849394578},{"_id":"themes/next/.git/refs/heads/master","hash":"53030aa0dab4693b7232641f37a6338b84e65281","modified":1496662524975},{"_id":"themes/next/.git/refs/tags/v5.1.2","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1533631363533},{"_id":"themes/next/.git/refs/tags/v5.1.3","hash":"5eec1427a836e6e34c81dc784bafb33c2ccf48f9","modified":1533631363535},{"_id":"themes/next/.git/refs/tags/v5.1.4","hash":"66e8b5048a20ce41a8a240072e535d725d62aef4","modified":1533631363537},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1496840249485},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1496840249485},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1496840249488},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1496840249488},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1496840249489},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1496840249489},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1496840249491},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1496840249492},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1496840249492},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1496840249494},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1496840249496},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1496840249499},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1496840249500},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1496840249501},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1496840249501},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1496840249501},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1496840249503},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1496840249503},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1496840249503},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1496840249504},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1496840249504},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1496840249505},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1533697637823},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1496840249506},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1496840249507},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1496840249507},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1496840249508},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1496840249509},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1496840249510},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1496840249510},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1496840249515},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1496840249518},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1496840249518},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1496840249516},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1496840249573},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1496840249574},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1496840249575},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1496840249596},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1496840249597},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1533631001175},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"4bed5dd22a63533269e6416e45ec4d16588a3db2","modified":1533633660213},{"_id":"themes/next/source/images/alipay.png","hash":"bbfb872e5bb1f475a9ea1557ff6aeabd5c655560","modified":1496849261708},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1496840249905},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1496840249907},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1496840249909},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1496840249911},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1496840249927},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1496840249929},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1496840249932},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1496840249933},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1496840249937},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1496840249961},{"_id":"themes/next/source/js/src/utils.js","hash":"c976214b8bbaa9512b886bf3687e94696f705e33","modified":1496840249977},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496840250038},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496840250052},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1496840250056},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1496662525263},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1496662525264},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1496840250125},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1496840250132},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1496840250134},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1496840250135},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1496840250146},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1496840250147},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1496840250149},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1496840250160},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1496840250160},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1496840250266},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1496840250289},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1496840250290},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1496840250291},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1496840250291},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1496840250298},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1496840250300},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1496840250302},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1496840250304},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1496840250330},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1496840250332},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1496840250333},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1496840250334},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1496840250335},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1496840250336},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1496840250337},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1496840250338},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1496840250339},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1496840250340},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1496840250341},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1496840250349},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1496840250352},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1496840250363},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1496840250365},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1496840250381},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1496840250382},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1496840250388},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1496840250391},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1496840250393},{"_id":"themes/next/.git/objects/pack/pack-9a69f9548e534e2b1a4e098c6027a0290ad5a346.idx","hash":"dc164658f385bbca7fd7db9d48ca92b14877e5cf","modified":1533631363292},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1496840250288},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496662524967},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1533631363384},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"c9abcffd1f03a6a76afa09334100c5003cf895a0","modified":1533631363393},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1496840249514},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1496840249515},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1496840249531},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1496840249532},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1496840249532},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1496840249533},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1496840249534},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1496840249545},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1496840249559},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1496840249568},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1496840249569},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1496840249570},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1496840249571},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1496840249572},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1496840249572},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1496840249578},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1496840249578},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1496840249579},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1496840249579},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1496840249580},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1496840249581},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1496840249582},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1496840249593},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"3250b76356ed0b075a5f91adc0dcb9f3f04490b0","modified":1533632998722},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1496840249594},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1496840249594},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1496840249595},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1496840249595},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1496840249589},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1496840249589},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1496840249589},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1496840249591},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1496840249591},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1496840249935},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1496840250002},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1496840250021},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496840250059},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496840250075},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496840250086},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496840250088},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496840250102},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496840250104},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1496840250120},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1496840250122},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1496840250124},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1496840250144},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496840250145},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1496840250175},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1496840250177},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1496840250178},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1496840250377},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1496840250380},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d503f561e83816239bdcb5a35ac66eca47458eb1","modified":1496662524977},{"_id":"themes/next/.git/objects/pack/pack-7e27b1b9ab01f1d8e6f6c1faa200a088e500cd60.idx","hash":"17a6471bd49f5a568f36ffae8aa9c30c45b4b7bc","modified":1496662524885},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1496840249994},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1496840249998},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496840250261},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496840250265},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1496840250386},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1496840249534},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1496840249536},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1496840249537},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1496840249537},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1496840249538},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1496840249539},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1496840249539},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1496840249540},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1496840249541},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1496840249542},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1496840249543},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1496840249543},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1496840249543},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1496840249544},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1496840249545},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1496840249546},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1496840249547},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1496840249547},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1496840249548},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1496840249548},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1496840249549},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1496840249549},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9ac64b0a0a74feb3e7ce66c900c2d39b0a122337","modified":1496933061746},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1496840249550},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1496840249551},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1496840249552},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1496840249552},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1496840249553},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1496840249553},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1496840249554},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1496840249555},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1496840249555},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1496840249556},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1496840249556},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1496840249557},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1496840249557},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1496840249558},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1496840249558},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1496840249559},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1496840249560},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1496840249560},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1496840249561},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1496840249561},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1496840249562},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1496840249564},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1496840249564},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1496840249565},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1496840249565},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1496840249566},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1496840249566},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1496840249567},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1496840249567},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1496840249568},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1496840249587},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1496840249588},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1496840249592},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496840249985},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496840249983},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496840249988},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496840249990},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496840250109},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1496840250114},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1496840250111},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1496840250115},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1496840250116},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1496840250118},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496840250203},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496840250235},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496840250257},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d503f561e83816239bdcb5a35ac66eca47458eb1","modified":1496662524971},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"e8741e832a59858d733778e819903ac4a2002b5a","modified":1533631363394},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"f4302ed87f34d40f63f168e40e7eb4b159eb4a1f","modified":1533631363386},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1496840250049},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1496840250374},{"_id":"themes/next/source/images/xiaoxiong.png","hash":"e865d3a544d4411433aaed5f192ff478c7f0f18d","modified":1533635842394},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1496840250244},{"_id":"themes/next/.git/objects/pack/pack-9a69f9548e534e2b1a4e098c6027a0290ad5a346.pack","hash":"62e3b5d6768e9ff17f24ec64e32fcc98e1d5f584","modified":1533631363288},{"_id":"themes/next/.git/objects/pack/pack-7e27b1b9ab01f1d8e6f6c1faa200a088e500cd60.pack","hash":"056a646a132f9cc9a1c97cbeefe7dfe6715d894e","modified":1496662524889},{"_id":"public/search.xml","hash":"3288a50765c01157ecd6dab31b9323e90449a42d","modified":1533723111303},{"_id":"public/categories/index.html","hash":"35eca87527c7a912d7f540d862e7073375344fda","modified":1533723111711},{"_id":"public/tags/index.html","hash":"c1067328ab5a0e9cc86b1507a7a716882aec22af","modified":1533723111712},{"_id":"public/2018/08/07/essionStorage和localStorage解释及区别/index.html","hash":"00db3e0352625d579fe08f30d3b6e2cac6041c91","modified":1533723111715},{"_id":"public/2018/07/31/js跳出循环总结/index.html","hash":"48331f9a331a75de77e23b94d654a4b0545590e3","modified":1533723111715},{"_id":"public/2018/07/27/js经典算法/index.html","hash":"c419aa35c2d63657f93993b386e52c33d6d27abb","modified":1533723111715},{"_id":"public/2018/07/26/js-将对象数组中具有相同值的对象取出组成新的数组/index.html","hash":"dcc5f270deeb2348619b1623415beff84be10dc2","modified":1533723111715},{"_id":"public/2018/07/19/js Date对象的详细使用/index.html","hash":"61a9da0dc079a8e658fcab2f7cd58b267416a56b","modified":1533723111716},{"_id":"public/2018/07/08/git常用命令/index.html","hash":"f1283132eccd487687a2aaa12097231ff882ebc7","modified":1533723111715},{"_id":"public/2018/07/02/Qiniu-image-tool-实现图片一键上传七牛云/index.html","hash":"d76ac59f36033408b8634a9e5d4b406aadd95281","modified":1533723111716},{"_id":"public/2017/07/16/使用gulp插件快速开发项目/index.html","hash":"6e512fe0ffd83a6605f9801b361ba31f3cdcfc20","modified":1533723111716},{"_id":"public/2017/07/09/使用gulp自动化构建前端项目/index.html","hash":"4d4703b2b7d0ab67ecb2dbf39270778581626f69","modified":1533723111716},{"_id":"public/2017/06/10/ss3伪类选择器nth-child和nth-of-type的区别/index.html","hash":"7dc23aa5f3b9343c3729c76c10253703e2a17819","modified":1533723111716},{"_id":"public/2017/06/10/Jquery-Dom元素Index-方法的使用/index.html","hash":"54440f72b37d04ea111e169cbec9f37e6866aa54","modified":1533723111717},{"_id":"public/2017/06/09/Markdown/index.html","hash":"c7ae52c96caced096ade298bad8979f7a56ccd82","modified":1533723111717},{"_id":"public/categories/Markdown/index.html","hash":"262234a782e8b3e4730cb4558ee72979b57bac10","modified":1533723111718},{"_id":"public/categories/javascript/index.html","hash":"b1ffe508c7f0d18124dfdc832c84fdd6b1d2efc7","modified":1533723111718},{"_id":"public/categories/教程/index.html","hash":"c86769086d74a199be51705d84ec977874cae957","modified":1533722732485},{"_id":"public/categories/前端/index.html","hash":"3386e5f9ab1ed3574d6ff111ee993a2cf69c4b3d","modified":1533722732485},{"_id":"public/categories/教程/工具/index.html","hash":"7e6779a3bc732d6a3a1c81606c7be1219eb80027","modified":1533722732485},{"_id":"public/categories/笔记/index.html","hash":"68b4602aaae30be5241b57e25e84322faf608f3e","modified":1533722732486},{"_id":"public/categories/前端/构建工具/index.html","hash":"b768119b0c16425fb311343117ff1d4817b04db3","modified":1533722732485},{"_id":"public/categories/前端/javascript/index.html","hash":"65e3c807c1158702d5109ee83a094d50682fe737","modified":1533722732486},{"_id":"public/categories/教程/云储存/index.html","hash":"6a53550bd51e0a6b4e06c9fd09770294bb3f85e4","modified":1533722732486},{"_id":"public/categories/笔记/前端/index.html","hash":"2dbcdf6c94facd57372b4162d982429b9ff4e4ec","modified":1533722732486},{"_id":"public/categories/前端/javascript/算法/index.html","hash":"b938f642201e72c1b02cde6cc7307e3cf38e8942","modified":1533722732487},{"_id":"public/categories/前端/javascript/排序/index.html","hash":"0cebb4c02225eb009a6a5ebcd6899a79f76a9693","modified":1533722732486},{"_id":"public/categories/前端/javascript/排序/算法/index.html","hash":"b173003fa9c91cdd6d53e83ebe6601ada1c010e6","modified":1533722732487},{"_id":"public/archives/index.html","hash":"d3b4278da134f124c5ada06de5d27fac278f33e5","modified":1533723111717},{"_id":"public/archives/page/2/index.html","hash":"8393e42b110c07f594ec46d350e489c8c4a32178","modified":1533723111717},{"_id":"public/archives/2017/index.html","hash":"09081d0597d56d2a3c6784681c5ae27231f1c03e","modified":1533723111717},{"_id":"public/archives/2017/06/index.html","hash":"1ac1ec8ea85eb54205f68d07f424e47bf2e95b28","modified":1533723111717},{"_id":"public/archives/2017/07/index.html","hash":"e3d67b2a1a766013f81325de26c2a1b651ce602d","modified":1533723111717},{"_id":"public/archives/2018/index.html","hash":"36bc52ed421c0600c01266b5d18e97bbae17373d","modified":1533723111717},{"_id":"public/archives/2018/07/index.html","hash":"fc46e7fb703dd6ccc1a54b3960a70a743c28b1a0","modified":1533723111717},{"_id":"public/archives/2018/08/index.html","hash":"61a3a6e5daedaeca536caa46979fcac1fab199cf","modified":1533723111717},{"_id":"public/index.html","hash":"962ba887482b5d28cec90baae202335718ea5beb","modified":1533723111718},{"_id":"public/page/2/index.html","hash":"b3234434fa8a4c2d0cfff9eeef8a527a06c64d48","modified":1533723111719},{"_id":"public/tags/Markdown/index.html","hash":"605ecdea2f48db529bb1b5aa313c9022f6e2faa9","modified":1533723111719},{"_id":"public/tags/sessionStorage/index.html","hash":"21ee3052ea05f0f020b79a688e8673e2b4d6f8cc","modified":1533723111719},{"_id":"public/tags/localStorage/index.html","hash":"b4545c3c811114465433a6904fc2adb5dcc0bc21","modified":1533723111719},{"_id":"public/tags/git/index.html","hash":"0af7b5ff4bf461009fba64004f4839cf9ce0831e","modified":1533723111719},{"_id":"public/tags/js/index.html","hash":"77a59c3aee8683003c1be54160f4c4ddea826bcf","modified":1533723111719},{"_id":"public/tags/date/index.html","hash":"6c0e0062f66d1a612f860a3a9e3e0ee16b977fc0","modified":1533723111719},{"_id":"public/tags/upload/index.html","hash":"4626ed75bf197be2598f1659ccc15b688152bfed","modified":1533723111719},{"_id":"public/tags/Array/index.html","hash":"2b5dde27d6c130032b87a0b10254c7539486c65f","modified":1533723111719},{"_id":"public/tags/sort/index.html","hash":"15c530425d351201d2660429c467a3eaf19f4c94","modified":1533723111719},{"_id":"public/tags/算法/index.html","hash":"3b019c897fbb2d0a29c061773bb825ed6f791fe5","modified":1533722732487},{"_id":"public/tags/循环/index.html","hash":"724b9e63d1ae4ed8dc08679b4bbf8c0ab32b0f0a","modified":1533723111720},{"_id":"public/tags/css/index.html","hash":"994aa32a33b0c090facab2688ff0cfc9417779a2","modified":1533723111720},{"_id":"public/tags/伪类选择器/index.html","hash":"47f0e438c123f9ce70eb2ffa25d603038566aa7b","modified":1533723111720},{"_id":"public/tags/gulp/index.html","hash":"f5e3dcc0a338dc6f36cb7393da8155bd206c7abe","modified":1533723111720},{"_id":"public/tags/jquery/index.html","hash":"623acdf3878d35804ec8f58fdd3200feabf5031b","modified":1533723111720},{"_id":"public/favicon.ico","hash":"0ac270496904d2081feb4711e9dd2e2996094b2e","modified":1533717011328},{"_id":"public/CNAME","hash":"3e0068ac2637bea3f0db66eb9b0927dc076b6017","modified":1533717011328},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533717011328},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1533717011328},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533717011328},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533717011328},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533717011328},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533717011329},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533717011329},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533717011329},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533717011329},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533717011329},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533717011329},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533717011329},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533717011329},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533717011329},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1533717011329},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1533717011329},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1533717011329},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1533717011329},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1533717011330},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1533717011330},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1533717011330},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1533717011330},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1533717011330},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1533717011330},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1533717011331},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1533717011331},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1533717011331},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1533717011331},{"_id":"public/images/weixin.png","hash":"f3c98f05125b5009413427f62d3cb655fc57d055","modified":1533717012121},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533717012124},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533717012139},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1533717012211},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1533717012211},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1533717012211},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1533717012211},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1533717012212},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1533717012212},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1533717012212},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1533717012212},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1533717012214},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1533717012214},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1533717012214},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1533717012214},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1533717012215},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1533717012215},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1533717012215},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1533717012216},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1533717012216},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1533717012216},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1533717012216},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1533717012216},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1533717012217},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1533717012217},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1533717012217},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1533717012217},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1533717012218},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1533717012219},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1533717012219},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1533717012219},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1533717012220},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1533717012220},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1533717012220},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1533717012223},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1533717012223},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1533717012223},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1533717012223},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1533717012224},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1533717012224},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1533717012224},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1533717012224},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1533717012224},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1533717012225},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1533717012225},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1533717012225},{"_id":"public/css/main.css","hash":"6a6e768a5408e6dab984158a6084f4e4080296ab","modified":1533717012225},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1533717012225},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1533717012225},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1533717012226},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1533717012226},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1533717012226},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1533717012226},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1533717012226},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1533717012226},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1533717012226},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1533717012227},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1533717012227},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1533717012227},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1533717012227},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1533717012227},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1533717012227},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1533717012227},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1533717012228},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1533717012229},{"_id":"public/images/alipay.png","hash":"bbfb872e5bb1f475a9ea1557ff6aeabd5c655560","modified":1533717012230},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1533717012231},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533717012231},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1533717012231},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1533717012444},{"_id":"public/images/xiaoxiong.png","hash":"e865d3a544d4411433aaed5f192ff478c7f0f18d","modified":1533717012734},{"_id":"public/categories/云储存/index.html","hash":"3db509700aa0942a3d69fd7d519b7ab54f6b02a6","modified":1533723111734},{"_id":"public/categories/工具/index.html","hash":"16080bec64feb937c285cc5bdd690a156bf59574","modified":1533723111735},{"_id":"public/categories/算法/index.html","hash":"da005154ffc00071bdfe79fcf52593ad1c987cd6","modified":1533723111735}],"Category":[{"name":"Markdown","_id":"cjkkvi5n60004i0nfh7upmzms"},{"name":"javascript","_id":"cjkkvi5nd0009i0nfjp20oe96"},{"name":"教程","_id":"cjkkvi5ni000fi0nf7ase6r6u"},{"name":"前端","_id":"cjkkvi5nm000ki0nf7l72qdwq"},{"name":"工具","parent":"cjkkvi5ni000fi0nf7ase6r6u","_id":"cjkkvi5o60013i0nf402uwkhp"},{"name":"笔记","_id":"cjkkvi5o80015i0nfjaz6grdg"},{"name":"构建工具","parent":"cjkkvi5nm000ki0nf7l72qdwq","_id":"cjkkvi5oa0019i0nfd7tuv34x"},{"name":"javascript","parent":"cjkkvi5nm000ki0nf7l72qdwq","_id":"cjkkvi5od001di0nfnlkx8vlt"},{"name":"云储存","parent":"cjkkvi5ni000fi0nf7ase6r6u","_id":"cjkkvi5ok001ri0nfkq3a36q7"},{"name":"前端","parent":"cjkkvi5o80015i0nfjaz6grdg","_id":"cjkkvi5ot0026i0nfr40nu4gi"},{"name":"算法","parent":"cjkkvi5od001di0nfnlkx8vlt","_id":"cjkkvi5ow002ei0nfe4fll9h2"},{"name":"排序","parent":"cjkkvi5od001di0nfnlkx8vlt","_id":"cjkkvi5oy002ii0nfy441rxoe"},{"name":"算法","parent":"cjkkvi5oy002ii0nfy441rxoe","_id":"cjkkvi5p0002mi0nfgr1vcn4g"},{"name":"云储存","_id":"cjkkz1bww0000wwnfnm5191sd"},{"name":"工具","_id":"cjkkz1bxb0002wwnf13qflowf"},{"name":"算法","parent":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkz1bxg0004wwnfdfwszjjg"},{"name":"算法","_id":"cjkkz2bu2000gwwnf6c3rd5o3"}],"Data":[],"Page":[{"title":"categories","date":"2017-06-05T12:13:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-05 20:13:54\ntype: \"categories\"\n---\n","updated":"2017-06-05T12:14:15.341Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkkvi5mw0001i0nfnmk00gbq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-05T12:11:31.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-05 20:11:31\ntype: \"tags\"\n---\n","updated":"2017-06-05T12:13:12.432Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkkvi5n30003i0nfy2wer4ef","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Markdown","author":"熊 超","date":"2017-06-08T16:15:00.000Z","_content":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n<!-- more -->\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2016 年 07月 07日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference","source":"_posts/Markdown.md","raw":"title: Markdown\nauthor: 熊 超\ntags:\n  - Markdown\ncategories:\n  - Markdown\ndate: 2017-06-09 00:15:00\n---\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n<!-- more -->\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2016 年 07月 07日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference","slug":"Markdown","published":1,"updated":"2018-07-19T03:41:38.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkkvi5mr0000i0nfw17yn1zd","content":"<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<a id=\"more\"></a>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\" target=\"_blank\" rel=\"external\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\" target=\"_blank\" rel=\"external\">甘特图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" target=\"_blank\" rel=\"external\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\" target=\"_blank\" rel=\"external\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\" target=\"_blank\" rel=\"external\">@ghosert</a><br>2016 年 07月 07日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"external\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n","site":{"data":{}},"excerpt":"<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>","more":"<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\" target=\"_blank\" rel=\"external\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\" target=\"_blank\" rel=\"external\">甘特图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" target=\"_blank\" rel=\"external\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\" target=\"_blank\" rel=\"external\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\" target=\"_blank\" rel=\"external\">@ghosert</a><br>2016 年 07月 07日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"external\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>"},{"title":"sessionStorage和localStorage解释及区别","author":"熊 超","date":"2018-08-07T06:33:00.000Z","_content":"\n\n###  HTML5的本地存储\n\nHTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。\n\n#### 本文主要来讲解Web Storage\n\n我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：\n<!--more-->\n\n1.大小：cookie的大小被限制在4KB。\n\n2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。\n\n3.复杂性：要正确的操纵cookie是很困难的。\n\n针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。\n\n#### 具体来说，Web Storage又分为两种：\n\n1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。\n\n2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。\n\n这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。\n\n#### 到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\n\n\nWebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。\n\n#### WebStorage两个主要目标： \n（1）提供一种在cookie之外存储会话数据的路径。\n（2）提供一种存储大量可以跨会话存在的数据的机制。\n\n#### HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\n\n1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。\n　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。\n\n2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB\n\n3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。\n\n4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理\n\n5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;\n\n6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；\n\n#### WebStorage的优点：\n\n（1）存储空间更大：cookie为4KB，而WebStorage是5MB；\n\n（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；\n\n（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；\n\n（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；\n\n（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；\n\n#### WebStorage提供了一些方法，数据操作比cookie方便；\n1. setItem（key, value） ——  保存数据，以键值对的方式储存信息。\n\n2. getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。\n\n3. removeItem（key） ——  删除单个数据，根据键值移除对应的信息。\n\n4. clear（） ——  删除所有的数据\n\n5. key（index） —— 获取某个索引的key\n\n#### cookie 、sessionStorage与localStorage的区别\n<table><col width=\"100\"/><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\" target=\"_blank\">详细看这(需科学上网)</a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a/></td></tr></table>\n\n#### 示例：\n（1） 新建两个文件：\n![](http://or87vteh1.bkt.clouddn.com/201808081728_587.png)\n\n\n``` html\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <a href=\"./test.html\" target=\"_blank\">跳到test.html</a>\n</body>\n</html>\n<script>\n    localStorage.setItem(\"xiongchao\",123);\n    sessionStorage.setItem(\"xiongchao\",456);\n</script>\n```\n\n（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）\n\n（3） 打开index.html,并使用链接打开test.html\n![](http://or87vteh1.bkt.clouddn.com/201808081739_652.png)\n![](http://or87vteh1.bkt.clouddn.com/201808081739_523.png)\n\n两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。\n\n（4） 单独打开test.html,会发现sessionStorage是空的。\n![](http://or87vteh1.bkt.clouddn.com/201808081739_652.png)\n![](http://or87vteh1.bkt.clouddn.com/201808081742_158.png)\n\n\n","source":"_posts/essionStorage和localStorage解释及区别.md","raw":"title: sessionStorage和localStorage解释及区别\nauthor: 熊 超\ntags:\n  - sessionStorage\n  - localStorage\ncategories:\n  - javascript\ndate: 2018-08-07 14:33:00\n---\n\n\n###  HTML5的本地存储\n\nHTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。\n\n#### 本文主要来讲解Web Storage\n\n我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：\n<!--more-->\n\n1.大小：cookie的大小被限制在4KB。\n\n2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。\n\n3.复杂性：要正确的操纵cookie是很困难的。\n\n针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。\n\n#### 具体来说，Web Storage又分为两种：\n\n1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。\n\n2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。\n\n这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。\n\n#### 到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\n\n\nWebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。\n\n#### WebStorage两个主要目标： \n（1）提供一种在cookie之外存储会话数据的路径。\n（2）提供一种存储大量可以跨会话存在的数据的机制。\n\n#### HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\n\n1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。\n　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。\n\n2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB\n\n3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。\n\n4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理\n\n5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;\n\n6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；\n\n#### WebStorage的优点：\n\n（1）存储空间更大：cookie为4KB，而WebStorage是5MB；\n\n（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；\n\n（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；\n\n（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；\n\n（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；\n\n#### WebStorage提供了一些方法，数据操作比cookie方便；\n1. setItem（key, value） ——  保存数据，以键值对的方式储存信息。\n\n2. getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。\n\n3. removeItem（key） ——  删除单个数据，根据键值移除对应的信息。\n\n4. clear（） ——  删除所有的数据\n\n5. key（index） —— 获取某个索引的key\n\n#### cookie 、sessionStorage与localStorage的区别\n<table><col width=\"100\"/><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\" target=\"_blank\">详细看这(需科学上网)</a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a/></td></tr></table>\n\n#### 示例：\n（1） 新建两个文件：\n![](http://or87vteh1.bkt.clouddn.com/201808081728_587.png)\n\n\n``` html\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <a href=\"./test.html\" target=\"_blank\">跳到test.html</a>\n</body>\n</html>\n<script>\n    localStorage.setItem(\"xiongchao\",123);\n    sessionStorage.setItem(\"xiongchao\",456);\n</script>\n```\n\n（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）\n\n（3） 打开index.html,并使用链接打开test.html\n![](http://or87vteh1.bkt.clouddn.com/201808081739_652.png)\n![](http://or87vteh1.bkt.clouddn.com/201808081739_523.png)\n\n两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。\n\n（4） 单独打开test.html,会发现sessionStorage是空的。\n![](http://or87vteh1.bkt.clouddn.com/201808081739_652.png)\n![](http://or87vteh1.bkt.clouddn.com/201808081742_158.png)\n\n\n","slug":"essionStorage和localStorage解释及区别","published":1,"updated":"2018-08-08T10:02:18.104Z","_id":"cjkkvi5n00002i0nfk1gcn19m","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"HTML5的本地存储\"><a href=\"#HTML5的本地存储\" class=\"headerlink\" title=\"HTML5的本地存储\"></a>HTML5的本地存储</h3><p>HTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。</p>\n<h4 id=\"本文主要来讲解Web-Storage\"><a href=\"#本文主要来讲解Web-Storage\" class=\"headerlink\" title=\"本文主要来讲解Web Storage\"></a>本文主要来讲解Web Storage</h4><p>我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：<br><a id=\"more\"></a></p>\n<p>1.大小：cookie的大小被限制在4KB。</p>\n<p>2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</p>\n<p>3.复杂性：要正确的操纵cookie是很困难的。</p>\n<p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。</p>\n<h4 id=\"具体来说，Web-Storage又分为两种：\"><a href=\"#具体来说，Web-Storage又分为两种：\" class=\"headerlink\" title=\"具体来说，Web Storage又分为两种：\"></a>具体来说，Web Storage又分为两种：</h4><p>1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。</p>\n<p>2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p>\n<p>这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。</p>\n<h4 id=\"到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"><a href=\"#到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\" class=\"headerlink\" title=\"到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"></a>到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。</h4><p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>\n<h4 id=\"WebStorage两个主要目标：\"><a href=\"#WebStorage两个主要目标：\" class=\"headerlink\" title=\"WebStorage两个主要目标：\"></a>WebStorage两个主要目标：</h4><p>（1）提供一种在cookie之外存储会话数据的路径。<br>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>\n<h4 id=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"><a href=\"#HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\" class=\"headerlink\" title=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"></a>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</h4><p>1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。<br>　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>\n<p>2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB</p>\n<p>3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>\n<p>4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>\n<p>5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;</p>\n<p>6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p>\n<h4 id=\"WebStorage的优点：\"><a href=\"#WebStorage的优点：\" class=\"headerlink\" title=\"WebStorage的优点：\"></a>WebStorage的优点：</h4><p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>\n<p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p>\n<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>\n<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p>\n<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p>\n<h4 id=\"WebStorage提供了一些方法，数据操作比cookie方便；\"><a href=\"#WebStorage提供了一些方法，数据操作比cookie方便；\" class=\"headerlink\" title=\"WebStorage提供了一些方法，数据操作比cookie方便；\"></a>WebStorage提供了一些方法，数据操作比cookie方便；</h4><ol>\n<li><p>setItem（key, value） ——  保存数据，以键值对的方式储存信息。</p>\n</li>\n<li><p>getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。</p>\n</li>\n<li><p>removeItem（key） ——  删除单个数据，根据键值移除对应的信息。</p>\n</li>\n<li><p>clear（） ——  删除所有的数据</p>\n</li>\n<li><p>key（index） —— 获取某个索引的key</p>\n</li>\n</ol>\n<h4 id=\"cookie-、sessionStorage与localStorage的区别\"><a href=\"#cookie-、sessionStorage与localStorage的区别\" class=\"headerlink\" title=\"cookie 、sessionStorage与localStorage的区别\"></a>cookie 、sessionStorage与localStorage的区别</h4><table><col width=\"100\"><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\" target=\"_blank\">详细看这(需科学上网)</a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a></a></a></td></tr></table>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>（1） 新建两个文件：<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081728_587.png\" alt=\"\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./test.html\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>跳到test.html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    localStorage.setItem(\"xiongchao\",123);</div><div class=\"line\">    sessionStorage.setItem(\"xiongchao\",456);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）</p>\n<p>（3） 打开index.html,并使用链接打开test.html<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081739_652.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081739_523.png\" alt=\"\"></p>\n<p>两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。</p>\n<p>（4） 单独打开test.html,会发现sessionStorage是空的。<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081739_652.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081742_158.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"HTML5的本地存储\"><a href=\"#HTML5的本地存储\" class=\"headerlink\" title=\"HTML5的本地存储\"></a>HTML5的本地存储</h3><p>HTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。</p>\n<h4 id=\"本文主要来讲解Web-Storage\"><a href=\"#本文主要来讲解Web-Storage\" class=\"headerlink\" title=\"本文主要来讲解Web Storage\"></a>本文主要来讲解Web Storage</h4><p>我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：<br>","more":"</p>\n<p>1.大小：cookie的大小被限制在4KB。</p>\n<p>2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</p>\n<p>3.复杂性：要正确的操纵cookie是很困难的。</p>\n<p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。</p>\n<h4 id=\"具体来说，Web-Storage又分为两种：\"><a href=\"#具体来说，Web-Storage又分为两种：\" class=\"headerlink\" title=\"具体来说，Web Storage又分为两种：\"></a>具体来说，Web Storage又分为两种：</h4><p>1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。</p>\n<p>2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p>\n<p>这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。</p>\n<h4 id=\"到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"><a href=\"#到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\" class=\"headerlink\" title=\"到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"></a>到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。</h4><p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>\n<h4 id=\"WebStorage两个主要目标：\"><a href=\"#WebStorage两个主要目标：\" class=\"headerlink\" title=\"WebStorage两个主要目标：\"></a>WebStorage两个主要目标：</h4><p>（1）提供一种在cookie之外存储会话数据的路径。<br>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>\n<h4 id=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"><a href=\"#HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\" class=\"headerlink\" title=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"></a>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</h4><p>1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。<br>　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>\n<p>2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB</p>\n<p>3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>\n<p>4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>\n<p>5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;</p>\n<p>6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p>\n<h4 id=\"WebStorage的优点：\"><a href=\"#WebStorage的优点：\" class=\"headerlink\" title=\"WebStorage的优点：\"></a>WebStorage的优点：</h4><p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>\n<p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p>\n<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>\n<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p>\n<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p>\n<h4 id=\"WebStorage提供了一些方法，数据操作比cookie方便；\"><a href=\"#WebStorage提供了一些方法，数据操作比cookie方便；\" class=\"headerlink\" title=\"WebStorage提供了一些方法，数据操作比cookie方便；\"></a>WebStorage提供了一些方法，数据操作比cookie方便；</h4><ol>\n<li><p>setItem（key, value） ——  保存数据，以键值对的方式储存信息。</p>\n</li>\n<li><p>getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。</p>\n</li>\n<li><p>removeItem（key） ——  删除单个数据，根据键值移除对应的信息。</p>\n</li>\n<li><p>clear（） ——  删除所有的数据</p>\n</li>\n<li><p>key（index） —— 获取某个索引的key</p>\n</li>\n</ol>\n<h4 id=\"cookie-、sessionStorage与localStorage的区别\"><a href=\"#cookie-、sessionStorage与localStorage的区别\" class=\"headerlink\" title=\"cookie 、sessionStorage与localStorage的区别\"></a>cookie 、sessionStorage与localStorage的区别</h4><table><col width=\"100\"><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\" target=\"_blank\">详细看这(需科学上网)</a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a></a></a></td></tr></table>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>（1） 新建两个文件：<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081728_587.png\" alt=\"\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./test.html\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>跳到test.html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    localStorage.setItem(\"xiongchao\",123);</div><div class=\"line\">    sessionStorage.setItem(\"xiongchao\",456);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）</p>\n<p>（3） 打开index.html,并使用链接打开test.html<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081739_652.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081739_523.png\" alt=\"\"></p>\n<p>两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。</p>\n<p>（4） 单独打开test.html,会发现sessionStorage是空的。<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081739_652.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201808081742_158.png\" alt=\"\"></p>"},{"title":"git常用命令","author":"熊 超","date":"2018-07-08T06:12:00.000Z","_content":"\n### git的工作原理图解：\n+ 将指定文件添加到暂存区(stage)\n![](http://or87vteh1.bkt.clouddn.com/201808030937_27.png)\n\n\n+ 将暂存区的所有内容提交到当前分支\n![](http://or87vteh1.bkt.clouddn.com/201808030941_860.png)\n\n<!--more-->\n\n+ 分支的创建与合并\n![](http://or87vteh1.bkt.clouddn.com/201808031105_462.png)\n![](http://or87vteh1.bkt.clouddn.com/201808031106_416.png)\n\n\n### git的使用步骤：\n\n##### 基本使用\n``` js\ngit add . //如果有删除的文件则：git add -A\n\ngit commit -m\"first commit\"\n\n//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq\ngit pull --rebase origin master\n\n//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令\ngit rebase --continue\n\ngit push origin master\n\n//push时有可能会提示没有change-id\n//复制提示中的\"gitdir=$(git rev-parse --git-dir); scp -p -P 29418 \n//xiongchao@192.168.1.192:hooks/commit-msg ${gitdir}/hooks/\"\ngit commit -amend\n```\n\n##### 如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\n``` js\ngit stash\n\ngit pull\n\ngit stash pop //可能有冲突，改冲突，可直接运行项目\n```\n\n#####  cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\n``` js\ngit reflog\n\n//复制要cherry-pick的commit id（有说明的那一行）\ngit cherry-pick commitid\n\ngit push origin master\n```\n\n### git的常用命令解释：\n\n##### $ git status\n查看工作区状态；\n\n##### $ git add readme.txt \n将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；\n\n##### $ git add . \n将所有文件添加到Git仓库暂存区；\n\n##### $ git commit -m \"wrote a readme file\" \n将暂存区的所有内容提交到当前分支；\n\n##### $ git checkout -- readme.txt\" \n把** readme.txt **文件在工作区的修改全部撤销，这里有两种情况：<br/><!--\n--><font size=2>一种是**readme.txt**自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br/><!--\n--><font size=2>一种是**readme.txt**已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font>\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n##### $ rm test.txt\" \n从版本库暂存区中删除该文件；\n\n##### $ git push origin master \n把当前分支**master**的内容推送到远程库；\n\n##### $ git pull --rebase origin master \n拉取远程库**master**分支的内容到本地仓库；\n\n##### $ git reset HEAD~ \n将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；\n\n##### $ git reset --hard 1094a \n将前版本回退到指定版本；\n\n##### $ git stash \n将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；\n\n##### $ git stash pop\n将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；\n\n##### $ git stash list\n查看现有stash；\n\n##### $ git stash drop\n移除stash；或者使用git stash clear命令，删除所有缓存的stash；\n\n##### $ git branch dev\n创建dev分支；\n\n##### $ git checkout dev\n切换到dev分支；\n\n##### $ git branch\n查看当前分支；\n\n##### $ git merge dev\n把dev分支的工作成果合并到master分支上；\n\n##### $ git branch -d dev\n删除dev分支；\n\n##### $ git clone\n将远程仓库克隆到本地；\n\n##### $ git log\n查看提交日志；\n\n##### $ git reflog\n记录你的每一次命令；\n\n","source":"_posts/git常用命令.md","raw":"title: git常用命令\nauthor: 熊 超\ntags:\n  - git\ncategories:\n  - 工具\ndate: 2018-07-08 14:12:00\n---\n\n### git的工作原理图解：\n+ 将指定文件添加到暂存区(stage)\n![](http://or87vteh1.bkt.clouddn.com/201808030937_27.png)\n\n\n+ 将暂存区的所有内容提交到当前分支\n![](http://or87vteh1.bkt.clouddn.com/201808030941_860.png)\n\n<!--more-->\n\n+ 分支的创建与合并\n![](http://or87vteh1.bkt.clouddn.com/201808031105_462.png)\n![](http://or87vteh1.bkt.clouddn.com/201808031106_416.png)\n\n\n### git的使用步骤：\n\n##### 基本使用\n``` js\ngit add . //如果有删除的文件则：git add -A\n\ngit commit -m\"first commit\"\n\n//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq\ngit pull --rebase origin master\n\n//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令\ngit rebase --continue\n\ngit push origin master\n\n//push时有可能会提示没有change-id\n//复制提示中的\"gitdir=$(git rev-parse --git-dir); scp -p -P 29418 \n//xiongchao@192.168.1.192:hooks/commit-msg ${gitdir}/hooks/\"\ngit commit -amend\n```\n\n##### 如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\n``` js\ngit stash\n\ngit pull\n\ngit stash pop //可能有冲突，改冲突，可直接运行项目\n```\n\n#####  cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\n``` js\ngit reflog\n\n//复制要cherry-pick的commit id（有说明的那一行）\ngit cherry-pick commitid\n\ngit push origin master\n```\n\n### git的常用命令解释：\n\n##### $ git status\n查看工作区状态；\n\n##### $ git add readme.txt \n将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；\n\n##### $ git add . \n将所有文件添加到Git仓库暂存区；\n\n##### $ git commit -m \"wrote a readme file\" \n将暂存区的所有内容提交到当前分支；\n\n##### $ git checkout -- readme.txt\" \n把** readme.txt **文件在工作区的修改全部撤销，这里有两种情况：<br/><!--\n--><font size=2>一种是**readme.txt**自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br/><!--\n--><font size=2>一种是**readme.txt**已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font>\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n##### $ rm test.txt\" \n从版本库暂存区中删除该文件；\n\n##### $ git push origin master \n把当前分支**master**的内容推送到远程库；\n\n##### $ git pull --rebase origin master \n拉取远程库**master**分支的内容到本地仓库；\n\n##### $ git reset HEAD~ \n将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；\n\n##### $ git reset --hard 1094a \n将前版本回退到指定版本；\n\n##### $ git stash \n将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；\n\n##### $ git stash pop\n将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；\n\n##### $ git stash list\n查看现有stash；\n\n##### $ git stash drop\n移除stash；或者使用git stash clear命令，删除所有缓存的stash；\n\n##### $ git branch dev\n创建dev分支；\n\n##### $ git checkout dev\n切换到dev分支；\n\n##### $ git branch\n查看当前分支；\n\n##### $ git merge dev\n把dev分支的工作成果合并到master分支上；\n\n##### $ git branch -d dev\n删除dev分支；\n\n##### $ git clone\n将远程仓库克隆到本地；\n\n##### $ git log\n查看提交日志；\n\n##### $ git reflog\n记录你的每一次命令；\n\n","slug":"git常用命令","published":1,"updated":"2018-08-08T10:07:38.580Z","_id":"cjkkvi5n90006i0nf7fef4ubp","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"git的工作原理图解：\"><a href=\"#git的工作原理图解：\" class=\"headerlink\" title=\"git的工作原理图解：\"></a>git的工作原理图解：</h3><ul>\n<li>将指定文件添加到暂存区(stage)<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808030937_27.png\" alt=\"\"></li>\n</ul>\n<ul>\n<li>将暂存区的所有内容提交到当前分支<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808030941_860.png\" alt=\"\"></li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>分支的创建与合并<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808031105_462.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201808031106_416.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"git的使用步骤：\"><a href=\"#git的使用步骤：\" class=\"headerlink\" title=\"git的使用步骤：\"></a>git的使用步骤：</h3><h5 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add . <span class=\"comment\">//如果有删除的文件则：git add -A</span></div><div class=\"line\"></div><div class=\"line\">git commit -m<span class=\"string\">\"first commit\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq</span></div><div class=\"line\">git pull --rebase origin master</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令</span></div><div class=\"line\">git rebase --<span class=\"keyword\">continue</span></div><div class=\"line\"></div><div class=\"line\">git push origin master</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//push时有可能会提示没有change-id</span></div><div class=\"line\"><span class=\"comment\">//复制提示中的\"gitdir=$(git rev-parse --git-dir); scp -p -P 29418 </span></div><div class=\"line\"><span class=\"comment\">//xiongchao@192.168.1.192:hooks/commit-msg $&#123;gitdir&#125;/hooks/\"</span></div><div class=\"line\">git commit -amend</div></pre></td></tr></table></figure>\n<h5 id=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"><a href=\"#如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\" class=\"headerlink\" title=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"></a>如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div><div class=\"line\"></div><div class=\"line\">git pull</div><div class=\"line\"></div><div class=\"line\">git stash pop <span class=\"comment\">//可能有冲突，改冲突，可直接运行项目</span></div></pre></td></tr></table></figure>\n<h5 id=\"cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\"><a href=\"#cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\" class=\"headerlink\" title=\"cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\"></a>cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reflog</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复制要cherry-pick的commit id（有说明的那一行）</span></div><div class=\"line\">git cherry-pick commitid</div><div class=\"line\"></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<h3 id=\"git的常用命令解释：\"><a href=\"#git的常用命令解释：\" class=\"headerlink\" title=\"git的常用命令解释：\"></a>git的常用命令解释：</h3><h5 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"$ git status\"></a>$ git status</h5><p>查看工作区状态；</p>\n<h5 id=\"git-add-readme-txt\"><a href=\"#git-add-readme-txt\" class=\"headerlink\" title=\"$ git add readme.txt\"></a>$ git add readme.txt</h5><p>将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；</p>\n<h5 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"$ git add .\"></a>$ git add .</h5><p>将所有文件添加到Git仓库暂存区；</p>\n<h5 id=\"git-commit-m-“wrote-a-readme-file”\"><a href=\"#git-commit-m-“wrote-a-readme-file”\" class=\"headerlink\" title=\"$ git commit -m “wrote a readme file”\"></a>$ git commit -m “wrote a readme file”</h5><p>将暂存区的所有内容提交到当前分支；</p>\n<h5 id=\"git-checkout-–-readme-txt”\"><a href=\"#git-checkout-–-readme-txt”\" class=\"headerlink\" title=\"$ git checkout – readme.txt”\"></a>$ git checkout – readme.txt”</h5><p>把<strong> readme.txt </strong>文件在工作区的修改全部撤销，这里有两种情况：<br><!--\n--><font size=\"2\">一种是<strong>readme.txt</strong>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br><!--\n--><font size=\"2\">一种是<strong>readme.txt</strong>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font><br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<h5 id=\"rm-test-txt”\"><a href=\"#rm-test-txt”\" class=\"headerlink\" title=\"$ rm test.txt”\"></a>$ rm test.txt”</h5><p>从版本库暂存区中删除该文件；</p>\n<h5 id=\"git-push-origin-master\"><a href=\"#git-push-origin-master\" class=\"headerlink\" title=\"$ git push origin master\"></a>$ git push origin master</h5><p>把当前分支<strong>master</strong>的内容推送到远程库；</p>\n<h5 id=\"git-pull-–rebase-origin-master\"><a href=\"#git-pull-–rebase-origin-master\" class=\"headerlink\" title=\"$ git pull –rebase origin master\"></a>$ git pull –rebase origin master</h5><p>拉取远程库<strong>master</strong>分支的内容到本地仓库；</p>\n<h5 id=\"git-reset-HEAD\"><a href=\"#git-reset-HEAD\" class=\"headerlink\" title=\"$ git reset HEAD~\"></a>$ git reset HEAD~</h5><p>将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；</p>\n<h5 id=\"git-reset-–hard-1094a\"><a href=\"#git-reset-–hard-1094a\" class=\"headerlink\" title=\"$ git reset –hard 1094a\"></a>$ git reset –hard 1094a</h5><p>将前版本回退到指定版本；</p>\n<h5 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"$ git stash\"></a>$ git stash</h5><p>将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；</p>\n<h5 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"$ git stash pop\"></a>$ git stash pop</h5><p>将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；</p>\n<h5 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"$ git stash list\"></a>$ git stash list</h5><p>查看现有stash；</p>\n<h5 id=\"git-stash-drop\"><a href=\"#git-stash-drop\" class=\"headerlink\" title=\"$ git stash drop\"></a>$ git stash drop</h5><p>移除stash；或者使用git stash clear命令，删除所有缓存的stash；</p>\n<h5 id=\"git-branch-dev\"><a href=\"#git-branch-dev\" class=\"headerlink\" title=\"$ git branch dev\"></a>$ git branch dev</h5><p>创建dev分支；</p>\n<h5 id=\"git-checkout-dev\"><a href=\"#git-checkout-dev\" class=\"headerlink\" title=\"$ git checkout dev\"></a>$ git checkout dev</h5><p>切换到dev分支；</p>\n<h5 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"$ git branch\"></a>$ git branch</h5><p>查看当前分支；</p>\n<h5 id=\"git-merge-dev\"><a href=\"#git-merge-dev\" class=\"headerlink\" title=\"$ git merge dev\"></a>$ git merge dev</h5><p>把dev分支的工作成果合并到master分支上；</p>\n<h5 id=\"git-branch-d-dev\"><a href=\"#git-branch-d-dev\" class=\"headerlink\" title=\"$ git branch -d dev\"></a>$ git branch -d dev</h5><p>删除dev分支；</p>\n<h5 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"$ git clone\"></a>$ git clone</h5><p>将远程仓库克隆到本地；</p>\n<h5 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"$ git log\"></a>$ git log</h5><p>查看提交日志；</p>\n<h5 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"$ git reflog\"></a>$ git reflog</h5><p>记录你的每一次命令；</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"git的工作原理图解：\"><a href=\"#git的工作原理图解：\" class=\"headerlink\" title=\"git的工作原理图解：\"></a>git的工作原理图解：</h3><ul>\n<li>将指定文件添加到暂存区(stage)<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808030937_27.png\" alt=\"\"></li>\n</ul>\n<ul>\n<li>将暂存区的所有内容提交到当前分支<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808030941_860.png\" alt=\"\"></li>\n</ul>","more":"<ul>\n<li>分支的创建与合并<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808031105_462.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201808031106_416.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"git的使用步骤：\"><a href=\"#git的使用步骤：\" class=\"headerlink\" title=\"git的使用步骤：\"></a>git的使用步骤：</h3><h5 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add . <span class=\"comment\">//如果有删除的文件则：git add -A</span></div><div class=\"line\"></div><div class=\"line\">git commit -m<span class=\"string\">\"first commit\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq</span></div><div class=\"line\">git pull --rebase origin master</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令</span></div><div class=\"line\">git rebase --<span class=\"keyword\">continue</span></div><div class=\"line\"></div><div class=\"line\">git push origin master</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//push时有可能会提示没有change-id</span></div><div class=\"line\"><span class=\"comment\">//复制提示中的\"gitdir=$(git rev-parse --git-dir); scp -p -P 29418 </span></div><div class=\"line\"><span class=\"comment\">//xiongchao@192.168.1.192:hooks/commit-msg $&#123;gitdir&#125;/hooks/\"</span></div><div class=\"line\">git commit -amend</div></pre></td></tr></table></figure>\n<h5 id=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"><a href=\"#如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\" class=\"headerlink\" title=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"></a>如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div><div class=\"line\"></div><div class=\"line\">git pull</div><div class=\"line\"></div><div class=\"line\">git stash pop <span class=\"comment\">//可能有冲突，改冲突，可直接运行项目</span></div></pre></td></tr></table></figure>\n<h5 id=\"cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\"><a href=\"#cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\" class=\"headerlink\" title=\"cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\"></a>cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reflog</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复制要cherry-pick的commit id（有说明的那一行）</span></div><div class=\"line\">git cherry-pick commitid</div><div class=\"line\"></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<h3 id=\"git的常用命令解释：\"><a href=\"#git的常用命令解释：\" class=\"headerlink\" title=\"git的常用命令解释：\"></a>git的常用命令解释：</h3><h5 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"$ git status\"></a>$ git status</h5><p>查看工作区状态；</p>\n<h5 id=\"git-add-readme-txt\"><a href=\"#git-add-readme-txt\" class=\"headerlink\" title=\"$ git add readme.txt\"></a>$ git add readme.txt</h5><p>将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；</p>\n<h5 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"$ git add .\"></a>$ git add .</h5><p>将所有文件添加到Git仓库暂存区；</p>\n<h5 id=\"git-commit-m-“wrote-a-readme-file”\"><a href=\"#git-commit-m-“wrote-a-readme-file”\" class=\"headerlink\" title=\"$ git commit -m “wrote a readme file”\"></a>$ git commit -m “wrote a readme file”</h5><p>将暂存区的所有内容提交到当前分支；</p>\n<h5 id=\"git-checkout-–-readme-txt”\"><a href=\"#git-checkout-–-readme-txt”\" class=\"headerlink\" title=\"$ git checkout – readme.txt”\"></a>$ git checkout – readme.txt”</h5><p>把<strong> readme.txt </strong>文件在工作区的修改全部撤销，这里有两种情况：<br><!--\n--><font size=\"2\">一种是<strong>readme.txt</strong>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br><!--\n--><font size=\"2\">一种是<strong>readme.txt</strong>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font><br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<h5 id=\"rm-test-txt”\"><a href=\"#rm-test-txt”\" class=\"headerlink\" title=\"$ rm test.txt”\"></a>$ rm test.txt”</h5><p>从版本库暂存区中删除该文件；</p>\n<h5 id=\"git-push-origin-master\"><a href=\"#git-push-origin-master\" class=\"headerlink\" title=\"$ git push origin master\"></a>$ git push origin master</h5><p>把当前分支<strong>master</strong>的内容推送到远程库；</p>\n<h5 id=\"git-pull-–rebase-origin-master\"><a href=\"#git-pull-–rebase-origin-master\" class=\"headerlink\" title=\"$ git pull –rebase origin master\"></a>$ git pull –rebase origin master</h5><p>拉取远程库<strong>master</strong>分支的内容到本地仓库；</p>\n<h5 id=\"git-reset-HEAD\"><a href=\"#git-reset-HEAD\" class=\"headerlink\" title=\"$ git reset HEAD~\"></a>$ git reset HEAD~</h5><p>将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；</p>\n<h5 id=\"git-reset-–hard-1094a\"><a href=\"#git-reset-–hard-1094a\" class=\"headerlink\" title=\"$ git reset –hard 1094a\"></a>$ git reset –hard 1094a</h5><p>将前版本回退到指定版本；</p>\n<h5 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"$ git stash\"></a>$ git stash</h5><p>将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；</p>\n<h5 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"$ git stash pop\"></a>$ git stash pop</h5><p>将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；</p>\n<h5 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"$ git stash list\"></a>$ git stash list</h5><p>查看现有stash；</p>\n<h5 id=\"git-stash-drop\"><a href=\"#git-stash-drop\" class=\"headerlink\" title=\"$ git stash drop\"></a>$ git stash drop</h5><p>移除stash；或者使用git stash clear命令，删除所有缓存的stash；</p>\n<h5 id=\"git-branch-dev\"><a href=\"#git-branch-dev\" class=\"headerlink\" title=\"$ git branch dev\"></a>$ git branch dev</h5><p>创建dev分支；</p>\n<h5 id=\"git-checkout-dev\"><a href=\"#git-checkout-dev\" class=\"headerlink\" title=\"$ git checkout dev\"></a>$ git checkout dev</h5><p>切换到dev分支；</p>\n<h5 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"$ git branch\"></a>$ git branch</h5><p>查看当前分支；</p>\n<h5 id=\"git-merge-dev\"><a href=\"#git-merge-dev\" class=\"headerlink\" title=\"$ git merge dev\"></a>$ git merge dev</h5><p>把dev分支的工作成果合并到master分支上；</p>\n<h5 id=\"git-branch-d-dev\"><a href=\"#git-branch-d-dev\" class=\"headerlink\" title=\"$ git branch -d dev\"></a>$ git branch -d dev</h5><p>删除dev分支；</p>\n<h5 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"$ git clone\"></a>$ git clone</h5><p>将远程仓库克隆到本地；</p>\n<h5 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"$ git log\"></a>$ git log</h5><p>查看提交日志；</p>\n<h5 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"$ git reflog\"></a>$ git reflog</h5><p>记录你的每一次命令；</p>"},{"title":"js Date对象的详细使用","author":"熊 超","date":"2018-07-19T03:44:00.000Z","_content":"## 前言：\n&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。\n\n\n\n\n## 一：Date()对象基本方法示例：\n\n<!--more-->\n```js\n//Date()：返回当日的日期和时间。\nvar date = new Date();//Thu Jul 19 2018 10:46:06 GMT+0800\n\n// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。\ndate.getDay();\t\t//4 今天是星期四\n\n// getFullYear()：从 Date 对象以四位数字返回年份。\ndate.getFullYear();\t\t//2018\n\n// getMonth()：从 Date 对象返回月份 (0 ~ 11)。\ndate.getMonth();\t\t//6\n\n// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。\ndate.getDate();\t\t//19\n\n// getHours()：返回 Date 对象的小时 (0 ~ 23)。\ndate.getHours();\t\t//10\n\n// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。\ndate.getMinutes();\t\t//53\n\n// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。\ndate.getSeconds();\t\t//5\n\n// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。\ndate.getMilliseconds();\t\t//522\n\n// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。\ndate.getTime();\t\t//1531968785522\n\n// setFullYear()：设置 Date 对象中的年份（四位数字）。\ndate.setFullYear(1995); //1531968785522\n\n// setMonth()：设置 Date 对象中月份 (0 ~ 11)。\ndate.setMonth(8); //Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)\n\n// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。\ndate.setDate(25); //Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)\n\n// setTime()：以毫秒设置 Date 对象。\ndate.setTime(77771564221); \nconsole.log(date) //Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)\n\n// toTimeString()：把 Date 对象的时间部分转换为字符串。\nconsole.log(date.toTimeString()); => 11:58:45 GMT+0800 (中国标准时间)\n\n// toDateString()：把 Date 对象的日期部分转换为字符串。\nconsole.log(date.toDateString()); => Thu Jul 19 2018\n\n```\n\n\n## 二：Date()对象组合高级用法：\n\n```js\n//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式\nfunction dateFormat(seconds) {\n    let date = new Date(seconds),\n        year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate(),\n        hour = date.getHours(),\n        min = date.getMinutes(),\n        s = date.getSeconds();\n    return `${year}-${formatNum(month)}-${formatNum(day)} ${formatNum(hour)}:${formatNum(min)}:${formatNum(s)}`;\n}\n\n//转换为yyyy-MM-dd日期格式\nfunction dateFormatShort(date) {\n    let year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate();\n    return `${year}-${formatNum(month)}-${formatNum(day)}`;\n}\n\n//将yyyy-MM-dd HH:mm:ss转化为毫秒数\nfunction formatMilliseconds(str){\n    // str = '2018-7-19 15:14:30';\n    str = str.replace(/-/g,'/');//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)\n    let date = new Date(str);\n    return date.getTime();\n}\n\n//获取两个时间的秒数差\nfunction SecondsDiff(startDate,endDate){\n    startDate = \"2018-7-18 10:56:23\",endDate = \"2018-7-19 12:00:00\";\n    let startTime = formatMilliseconds(startDate),//获得毫秒数\n        endTime = formatMilliseconds(endDate),\n        milliseconds = endTime - startTime;//毫秒数之差\n    return parseInt(milliseconds/1000);\n}\n\n//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久'dd天HH小时'）\nfunction secondsFormat(seconds){\n    seconds = SecondsDiff();\n    let day = Math.floor(seconds / 3600 / 24),\n        hour = Math.floor((seconds % 86400) / 3600),\n        min = Math.floor((seconds % 86400 % 3600) / 60 ),\n        second = Math.floor(seconds % 86400 % 3600 % 60);\n        hour += day * 24;\n    return `${formatNum(hour)}:${formatNum(min)}:${formatNum(second)}`;//为什么只计算天数,因为一般活动只在相邻几天\n}\n    \n//获得某月的天数　　 \nfunction getMonthDays(year, month) {\n    let nowDate = new Date(year,month,0),\n        days = nowDate.getDate();\n    return days;\n}\n\n//补0操作\nfunction formatNum(e) {\n    return e >= 10 ? e : `0${e}`;\n}\n\t\n```\n\n\n## 三：对当前时间的判定：\n\n```js\n//判断时间是否是今天\nfunction isToday(str){\n    str = new Date(str.replace(/-/g,\"/\"));\n    if (str.toDateString() === new Date().toDateString()) {//今天\n        return true;\n    } else if (new Date(str) > new Date()){\n        return false;\n    }\n}\n\n/**\n* 判断某个时间是前天、昨天、今天、明天、后天\n* @now:当前服务器时间\n*/\nfunction daysText(str,now){\n    let date = str.substring(0,str.indexOf(\"-\")+6);\n    now = new Date(now.replace(/-/g,'/'));\n    now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    str = new Date(str.replace(/-/g,'/'));\n    str = new Date(str.getFullYear(), str.getMonth(), str.getDate());\n    let diff = (str - now) / 1000 / 60 / 60 / 24;\n    if (diff < -1) {\n        return \"前天\";\n    } else if (diff < -0) {\n        return \"昨天\"\n    } else if (diff == 0) {\n        return \"今天\";\n    } else if (diff < 2) {\n        return \"明日\";\n    } else if (diff < 3) {\n        return \"后天\";\n    } else {\n        return date;\n    }\n}\n\n//判断是否超过48小时\nfunction overTime(seconds) {\n    let diffSeconds = Math.floor((new Date().getTime() - seconds)/1000),\n        days = Math.floor(diffSeconds / 86400),\n        hour = Math.floor(diffSeconds % 86400 / 3600),\n        min = Math.floor((diffSeconds % 86400 % 3600) / 60 )\n        second = Math.floor(diffSeconds % 86400 % 3600 % 60);\n\n    if(days>2){//超过两天超时\n        return 0;\n    }else if(days==2){ //刚好两天判断时分秒\n        if(hour==0){ \n            if(min==0){\n                if(second==0){\n                    return 1;\n                }else{ //有多余秒数，超时\n                    return 0;\n                }\n            }else{ //有多余分钟，超时\n                return 0;\n            }\n        }else{ //还有多余小时，超时\n            return 0;\n        }\n    }else { //小于两天则没有超时\n        return 1;\n    }\n}\n\n/**\n * 判断某个时间相对于现在过了多久\n * seconds:毫秒数\n */\nfunction pastTimes(seconds){\n    //得到时间\n    let dateTime;\n\n    //传入时间\n    let starDate = new Date(seconds),\n        starYear = starDate.getFullYear(), //年\n        starMonth = starDate.getMonth() + 1, //月\n        starDay = starDate.getDate(),     //日\n        starHour = starDate.getHours(),   //时\n        starMin = starDate.getMinutes(),  //分\n        starSen = starDate.getSeconds(); //秒\n\n    //当前时间\n    let nowDate = new Date(),\n        nowYear = nowDate.getFullYear(), //年\n        nowMonth = nowDate.getMonth() + 1, //月\n        nowDay = nowDate.getDate(),     //日\n        nowHour = nowDate.getHours(),   //时\n        nowMin = nowDate.getMinutes(),  //分\n        nowSen = nowDate.getSeconds();  //秒\n    //判断是否在同一年\n    if (starYear == nowYear) {\n        //判断是否是同一个月\n        if (starMonth == nowMonth) {\n             //判断在今天昨天或者前天\n            let diffDay = nowDay - starDay;\n            if (diffDay == 0) {//今天\n                //判断小时数\n                let diffHours = nowHour - starHour;\n                let diffMinutes = nowMin - starMin;\n                if (diffHours == 0) {\n                    if (diffMinutes >= 0 && diffMinutes < 2) {\n                        dateTime = \"刚刚\";\n                    } else if (diffMinutes >= 2) {\n                        dateTime = diffMinutes + \"分钟前\";\n                    }\n                }else if (diffHours == 1) {\n                    if (diffMinutes < 0) {\n                        let minute = (60 - starMin) + (nowMin - 0);\n                        dateTime = minute + \"分钟前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"1个小时前\";\n                    }\n                }else if (diffHours == 2) {\n                     if (diffMinutes < 0) {\n                        dateTime = \"1个小时前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"2个小时前\";\n                    }\n                }else{\n                    dateTime = formatNum(starHour) + ':' + formatNum(starMin);\n                }\n\n            }else if(diffDay == 1) {//昨天\n                dateTime = '昨天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else if (diffDay == 2) {//前天\n                dateTime = '前天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else{\n                dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n            }\n        }else{\n            //不在同一个月且在同一年的不显示年份\n            dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n        }\n    }else{\n        //不在同一年的显示年月日时分\n        dateTime = starYear + '-' + formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n    }\n\n    return dateTime\n    \n}\n\n```","source":"_posts/js Date对象的详细使用.md","raw":"title: js Date对象的详细使用\nauthor: 熊 超\ntags:\n  - js\n  - date\ncategories:\n  - javascript\ndate: 2018-07-19 11:44:00\n---\n## 前言：\n&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。\n\n\n\n\n## 一：Date()对象基本方法示例：\n\n<!--more-->\n```js\n//Date()：返回当日的日期和时间。\nvar date = new Date();//Thu Jul 19 2018 10:46:06 GMT+0800\n\n// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。\ndate.getDay();\t\t//4 今天是星期四\n\n// getFullYear()：从 Date 对象以四位数字返回年份。\ndate.getFullYear();\t\t//2018\n\n// getMonth()：从 Date 对象返回月份 (0 ~ 11)。\ndate.getMonth();\t\t//6\n\n// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。\ndate.getDate();\t\t//19\n\n// getHours()：返回 Date 对象的小时 (0 ~ 23)。\ndate.getHours();\t\t//10\n\n// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。\ndate.getMinutes();\t\t//53\n\n// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。\ndate.getSeconds();\t\t//5\n\n// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。\ndate.getMilliseconds();\t\t//522\n\n// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。\ndate.getTime();\t\t//1531968785522\n\n// setFullYear()：设置 Date 对象中的年份（四位数字）。\ndate.setFullYear(1995); //1531968785522\n\n// setMonth()：设置 Date 对象中月份 (0 ~ 11)。\ndate.setMonth(8); //Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)\n\n// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。\ndate.setDate(25); //Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)\n\n// setTime()：以毫秒设置 Date 对象。\ndate.setTime(77771564221); \nconsole.log(date) //Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)\n\n// toTimeString()：把 Date 对象的时间部分转换为字符串。\nconsole.log(date.toTimeString()); => 11:58:45 GMT+0800 (中国标准时间)\n\n// toDateString()：把 Date 对象的日期部分转换为字符串。\nconsole.log(date.toDateString()); => Thu Jul 19 2018\n\n```\n\n\n## 二：Date()对象组合高级用法：\n\n```js\n//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式\nfunction dateFormat(seconds) {\n    let date = new Date(seconds),\n        year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate(),\n        hour = date.getHours(),\n        min = date.getMinutes(),\n        s = date.getSeconds();\n    return `${year}-${formatNum(month)}-${formatNum(day)} ${formatNum(hour)}:${formatNum(min)}:${formatNum(s)}`;\n}\n\n//转换为yyyy-MM-dd日期格式\nfunction dateFormatShort(date) {\n    let year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate();\n    return `${year}-${formatNum(month)}-${formatNum(day)}`;\n}\n\n//将yyyy-MM-dd HH:mm:ss转化为毫秒数\nfunction formatMilliseconds(str){\n    // str = '2018-7-19 15:14:30';\n    str = str.replace(/-/g,'/');//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)\n    let date = new Date(str);\n    return date.getTime();\n}\n\n//获取两个时间的秒数差\nfunction SecondsDiff(startDate,endDate){\n    startDate = \"2018-7-18 10:56:23\",endDate = \"2018-7-19 12:00:00\";\n    let startTime = formatMilliseconds(startDate),//获得毫秒数\n        endTime = formatMilliseconds(endDate),\n        milliseconds = endTime - startTime;//毫秒数之差\n    return parseInt(milliseconds/1000);\n}\n\n//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久'dd天HH小时'）\nfunction secondsFormat(seconds){\n    seconds = SecondsDiff();\n    let day = Math.floor(seconds / 3600 / 24),\n        hour = Math.floor((seconds % 86400) / 3600),\n        min = Math.floor((seconds % 86400 % 3600) / 60 ),\n        second = Math.floor(seconds % 86400 % 3600 % 60);\n        hour += day * 24;\n    return `${formatNum(hour)}:${formatNum(min)}:${formatNum(second)}`;//为什么只计算天数,因为一般活动只在相邻几天\n}\n    \n//获得某月的天数　　 \nfunction getMonthDays(year, month) {\n    let nowDate = new Date(year,month,0),\n        days = nowDate.getDate();\n    return days;\n}\n\n//补0操作\nfunction formatNum(e) {\n    return e >= 10 ? e : `0${e}`;\n}\n\t\n```\n\n\n## 三：对当前时间的判定：\n\n```js\n//判断时间是否是今天\nfunction isToday(str){\n    str = new Date(str.replace(/-/g,\"/\"));\n    if (str.toDateString() === new Date().toDateString()) {//今天\n        return true;\n    } else if (new Date(str) > new Date()){\n        return false;\n    }\n}\n\n/**\n* 判断某个时间是前天、昨天、今天、明天、后天\n* @now:当前服务器时间\n*/\nfunction daysText(str,now){\n    let date = str.substring(0,str.indexOf(\"-\")+6);\n    now = new Date(now.replace(/-/g,'/'));\n    now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    str = new Date(str.replace(/-/g,'/'));\n    str = new Date(str.getFullYear(), str.getMonth(), str.getDate());\n    let diff = (str - now) / 1000 / 60 / 60 / 24;\n    if (diff < -1) {\n        return \"前天\";\n    } else if (diff < -0) {\n        return \"昨天\"\n    } else if (diff == 0) {\n        return \"今天\";\n    } else if (diff < 2) {\n        return \"明日\";\n    } else if (diff < 3) {\n        return \"后天\";\n    } else {\n        return date;\n    }\n}\n\n//判断是否超过48小时\nfunction overTime(seconds) {\n    let diffSeconds = Math.floor((new Date().getTime() - seconds)/1000),\n        days = Math.floor(diffSeconds / 86400),\n        hour = Math.floor(diffSeconds % 86400 / 3600),\n        min = Math.floor((diffSeconds % 86400 % 3600) / 60 )\n        second = Math.floor(diffSeconds % 86400 % 3600 % 60);\n\n    if(days>2){//超过两天超时\n        return 0;\n    }else if(days==2){ //刚好两天判断时分秒\n        if(hour==0){ \n            if(min==0){\n                if(second==0){\n                    return 1;\n                }else{ //有多余秒数，超时\n                    return 0;\n                }\n            }else{ //有多余分钟，超时\n                return 0;\n            }\n        }else{ //还有多余小时，超时\n            return 0;\n        }\n    }else { //小于两天则没有超时\n        return 1;\n    }\n}\n\n/**\n * 判断某个时间相对于现在过了多久\n * seconds:毫秒数\n */\nfunction pastTimes(seconds){\n    //得到时间\n    let dateTime;\n\n    //传入时间\n    let starDate = new Date(seconds),\n        starYear = starDate.getFullYear(), //年\n        starMonth = starDate.getMonth() + 1, //月\n        starDay = starDate.getDate(),     //日\n        starHour = starDate.getHours(),   //时\n        starMin = starDate.getMinutes(),  //分\n        starSen = starDate.getSeconds(); //秒\n\n    //当前时间\n    let nowDate = new Date(),\n        nowYear = nowDate.getFullYear(), //年\n        nowMonth = nowDate.getMonth() + 1, //月\n        nowDay = nowDate.getDate(),     //日\n        nowHour = nowDate.getHours(),   //时\n        nowMin = nowDate.getMinutes(),  //分\n        nowSen = nowDate.getSeconds();  //秒\n    //判断是否在同一年\n    if (starYear == nowYear) {\n        //判断是否是同一个月\n        if (starMonth == nowMonth) {\n             //判断在今天昨天或者前天\n            let diffDay = nowDay - starDay;\n            if (diffDay == 0) {//今天\n                //判断小时数\n                let diffHours = nowHour - starHour;\n                let diffMinutes = nowMin - starMin;\n                if (diffHours == 0) {\n                    if (diffMinutes >= 0 && diffMinutes < 2) {\n                        dateTime = \"刚刚\";\n                    } else if (diffMinutes >= 2) {\n                        dateTime = diffMinutes + \"分钟前\";\n                    }\n                }else if (diffHours == 1) {\n                    if (diffMinutes < 0) {\n                        let minute = (60 - starMin) + (nowMin - 0);\n                        dateTime = minute + \"分钟前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"1个小时前\";\n                    }\n                }else if (diffHours == 2) {\n                     if (diffMinutes < 0) {\n                        dateTime = \"1个小时前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"2个小时前\";\n                    }\n                }else{\n                    dateTime = formatNum(starHour) + ':' + formatNum(starMin);\n                }\n\n            }else if(diffDay == 1) {//昨天\n                dateTime = '昨天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else if (diffDay == 2) {//前天\n                dateTime = '前天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else{\n                dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n            }\n        }else{\n            //不在同一个月且在同一年的不显示年份\n            dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n        }\n    }else{\n        //不在同一年的显示年月日时分\n        dateTime = starYear + '-' + formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n    }\n\n    return dateTime\n    \n}\n\n```","slug":"js Date对象的详细使用","published":1,"updated":"2018-08-08T10:08:04.001Z","_id":"cjkkvi5nb0007i0nfkzehw9bf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。</p>\n<h2 id=\"一：Date-对象基本方法示例：\"><a href=\"#一：Date-对象基本方法示例：\" class=\"headerlink\" title=\"一：Date()对象基本方法示例：\"></a>一：Date()对象基本方法示例：</h2><a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Date()：返回当日的日期和时间。</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();<span class=\"comment\">//Thu Jul 19 2018 10:46:06 GMT+0800</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。</span></div><div class=\"line\">date.getDay();\t\t<span class=\"comment\">//4 今天是星期四</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getFullYear()：从 Date 对象以四位数字返回年份。</span></div><div class=\"line\">date.getFullYear();\t\t<span class=\"comment\">//2018</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getMonth()：从 Date 对象返回月份 (0 ~ 11)。</span></div><div class=\"line\">date.getMonth();\t\t<span class=\"comment\">//6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。</span></div><div class=\"line\">date.getDate();\t\t<span class=\"comment\">//19</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getHours()：返回 Date 对象的小时 (0 ~ 23)。</span></div><div class=\"line\">date.getHours();\t\t<span class=\"comment\">//10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。</span></div><div class=\"line\">date.getMinutes();\t\t<span class=\"comment\">//53</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。</span></div><div class=\"line\">date.getSeconds();\t\t<span class=\"comment\">//5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。</span></div><div class=\"line\">date.getMilliseconds();\t\t<span class=\"comment\">//522</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。</span></div><div class=\"line\">date.getTime();\t\t<span class=\"comment\">//1531968785522</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setFullYear()：设置 Date 对象中的年份（四位数字）。</span></div><div class=\"line\">date.setFullYear(<span class=\"number\">1995</span>); <span class=\"comment\">//1531968785522</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setMonth()：设置 Date 对象中月份 (0 ~ 11)。</span></div><div class=\"line\">date.setMonth(<span class=\"number\">8</span>); <span class=\"comment\">//Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。</span></div><div class=\"line\">date.setDate(<span class=\"number\">25</span>); <span class=\"comment\">//Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setTime()：以毫秒设置 Date 对象。</span></div><div class=\"line\">date.setTime(<span class=\"number\">77771564221</span>); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(date) <span class=\"comment\">//Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// toTimeString()：把 Date 对象的时间部分转换为字符串。</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(date.toTimeString()); =&gt; <span class=\"number\">11</span>:<span class=\"number\">58</span>:<span class=\"number\">45</span> GMT+<span class=\"number\">0800</span> (中国标准时间)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// toDateString()：把 Date 对象的日期部分转换为字符串。</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(date.toDateString()); =&gt; Thu Jul <span class=\"number\">19</span> <span class=\"number\">2018</span></div></pre></td></tr></table></figure>\n<h2 id=\"二：Date-对象组合高级用法：\"><a href=\"#二：Date-对象组合高级用法：\" class=\"headerlink\" title=\"二：Date()对象组合高级用法：\"></a>二：Date()对象组合高级用法：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dateFormat</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(seconds),</div><div class=\"line\">        year = date.getFullYear(),</div><div class=\"line\">        month = date.getMonth() + <span class=\"number\">1</span>,</div><div class=\"line\">        day = date.getDate(),</div><div class=\"line\">        hour = date.getHours(),</div><div class=\"line\">        min = date.getMinutes(),</div><div class=\"line\">        s = date.getSeconds();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span> <span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(s)&#125;</span>`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//转换为yyyy-MM-dd日期格式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dateFormatShort</span>(<span class=\"params\">date</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> year = date.getFullYear(),</div><div class=\"line\">    month = date.getMonth() + <span class=\"number\">1</span>,</div><div class=\"line\">    day = date.getDate();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span>`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将yyyy-MM-dd HH:mm:ss转化为毫秒数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatMilliseconds</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// str = '2018-7-19 15:14:30';</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>);<span class=\"comment\">//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)</span></div><div class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str);</div><div class=\"line\">    <span class=\"keyword\">return</span> date.getTime();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两个时间的秒数差</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SecondsDiff</span>(<span class=\"params\">startDate,endDate</span>)</span>&#123;</div><div class=\"line\">    startDate = <span class=\"string\">\"2018-7-18 10:56:23\"</span>,endDate = <span class=\"string\">\"2018-7-19 12:00:00\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> startTime = formatMilliseconds(startDate),<span class=\"comment\">//获得毫秒数</span></div><div class=\"line\">        endTime = formatMilliseconds(endDate),</div><div class=\"line\">        milliseconds = endTime - startTime;<span class=\"comment\">//毫秒数之差</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(milliseconds/<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久'dd天HH小时'）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secondsFormat</span>(<span class=\"params\">seconds</span>)</span>&#123;</div><div class=\"line\">    seconds = SecondsDiff();</div><div class=\"line\">    <span class=\"keyword\">let</span> day = <span class=\"built_in\">Math</span>.floor(seconds / <span class=\"number\">3600</span> / <span class=\"number\">24</span>),</div><div class=\"line\">        hour = <span class=\"built_in\">Math</span>.floor((seconds % <span class=\"number\">86400</span>) / <span class=\"number\">3600</span>),</div><div class=\"line\">        min = <span class=\"built_in\">Math</span>.floor((seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> ),</div><div class=\"line\">        second = <span class=\"built_in\">Math</span>.floor(seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</div><div class=\"line\">        hour += day * <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(second)&#125;</span>`</span>;<span class=\"comment\">//为什么只计算天数,因为一般活动只在相邻几天</span></div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//获得某月的天数　　 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMonthDays</span>(<span class=\"params\">year, month</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year,month,<span class=\"number\">0</span>),</div><div class=\"line\">        days = nowDate.getDate();</div><div class=\"line\">    <span class=\"keyword\">return</span> days;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//补0操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatNum</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> e &gt;= <span class=\"number\">10</span> ? e : <span class=\"string\">`0<span class=\"subst\">$&#123;e&#125;</span>`</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"三：对当前时间的判定：\"><a href=\"#三：对当前时间的判定：\" class=\"headerlink\" title=\"三：对当前时间的判定：\"></a>三：对当前时间的判定：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断时间是否是今天</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isToday</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">\"/\"</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (str.toDateString() === <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toDateString()) &#123;<span class=\"comment\">//今天</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str) &gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 判断某个时间是前天、昨天、今天、明天、后天</div><div class=\"line\">* @now:当前服务器时间</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">daysText</span>(<span class=\"params\">str,now</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> date = str.substring(<span class=\"number\">0</span>,str.indexOf(<span class=\"string\">\"-\"</span>)+<span class=\"number\">6</span>);</div><div class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(now.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>));</div><div class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(now.getFullYear(), now.getMonth(), now.getDate());</div><div class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>));</div><div class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str.getFullYear(), str.getMonth(), str.getDate());</div><div class=\"line\">    <span class=\"keyword\">let</span> diff = (str - now) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"前天\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">-0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"昨天\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"今天\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"明日\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"后天\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> date;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否超过48小时</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">overTime</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> diffSeconds = <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - seconds)/<span class=\"number\">1000</span>),</div><div class=\"line\">        days = <span class=\"built_in\">Math</span>.floor(diffSeconds / <span class=\"number\">86400</span>),</div><div class=\"line\">        hour = <span class=\"built_in\">Math</span>.floor(diffSeconds % <span class=\"number\">86400</span> / <span class=\"number\">3600</span>),</div><div class=\"line\">        min = <span class=\"built_in\">Math</span>.floor((diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> )</div><div class=\"line\">        second = <span class=\"built_in\">Math</span>.floor(diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(days&gt;<span class=\"number\">2</span>)&#123;<span class=\"comment\">//超过两天超时</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(days==<span class=\"number\">2</span>)&#123; <span class=\"comment\">//刚好两天判断时分秒</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(hour==<span class=\"number\">0</span>)&#123; </div><div class=\"line\">            <span class=\"keyword\">if</span>(min==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(second==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余秒数，超时</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余分钟，超时</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//还有多余小时，超时</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//小于两天则没有超时</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 判断某个时间相对于现在过了多久</div><div class=\"line\"> * seconds:毫秒数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pastTimes</span>(<span class=\"params\">seconds</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//得到时间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> dateTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//传入时间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> starDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(seconds),</div><div class=\"line\">        starYear = starDate.getFullYear(), <span class=\"comment\">//年</span></div><div class=\"line\">        starMonth = starDate.getMonth() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></div><div class=\"line\">        starDay = starDate.getDate(),     <span class=\"comment\">//日</span></div><div class=\"line\">        starHour = starDate.getHours(),   <span class=\"comment\">//时</span></div><div class=\"line\">        starMin = starDate.getMinutes(),  <span class=\"comment\">//分</span></div><div class=\"line\">        starSen = starDate.getSeconds(); <span class=\"comment\">//秒</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当前时间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">        nowYear = nowDate.getFullYear(), <span class=\"comment\">//年</span></div><div class=\"line\">        nowMonth = nowDate.getMonth() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></div><div class=\"line\">        nowDay = nowDate.getDate(),     <span class=\"comment\">//日</span></div><div class=\"line\">        nowHour = nowDate.getHours(),   <span class=\"comment\">//时</span></div><div class=\"line\">        nowMin = nowDate.getMinutes(),  <span class=\"comment\">//分</span></div><div class=\"line\">        nowSen = nowDate.getSeconds();  <span class=\"comment\">//秒</span></div><div class=\"line\">    <span class=\"comment\">//判断是否在同一年</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (starYear == nowYear) &#123;</div><div class=\"line\">        <span class=\"comment\">//判断是否是同一个月</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (starMonth == nowMonth) &#123;</div><div class=\"line\">             <span class=\"comment\">//判断在今天昨天或者前天</span></div><div class=\"line\">            <span class=\"keyword\">let</span> diffDay = nowDay - starDay;</div><div class=\"line\">            <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//今天</span></div><div class=\"line\">                <span class=\"comment\">//判断小时数</span></div><div class=\"line\">                <span class=\"keyword\">let</span> diffHours = nowHour - starHour;</div><div class=\"line\">                <span class=\"keyword\">let</span> diffMinutes = nowMin - starMin;</div><div class=\"line\">                <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">0</span> &amp;&amp; diffMinutes &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"刚刚\"</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        dateTime = diffMinutes + <span class=\"string\">\"分钟前\"</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">let</span> minute = (<span class=\"number\">60</span> - starMin) + (nowMin - <span class=\"number\">0</span>);</div><div class=\"line\">                        dateTime = minute + <span class=\"string\">\"分钟前\"</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"1个小时前\"</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                     <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"1个小时前\"</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"2个小时前\"</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    dateTime = formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(diffDay == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//昨天</span></div><div class=\"line\">                dateTime = <span class=\"string\">'昨天'</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">2</span>) &#123;<span class=\"comment\">//前天</span></div><div class=\"line\">                dateTime = <span class=\"string\">'前天'</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                dateTime = formatNum(starMonth) + <span class=\"string\">'-'</span> + formatNum(starDay) + <span class=\"string\">' '</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//不在同一个月且在同一年的不显示年份</span></div><div class=\"line\">            dateTime = formatNum(starMonth) + <span class=\"string\">'-'</span> + formatNum(starDay) + <span class=\"string\">' '</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//不在同一年的显示年月日时分</span></div><div class=\"line\">        dateTime = starYear + <span class=\"string\">'-'</span> + formatNum(starMonth) + <span class=\"string\">'-'</span> + formatNum(starDay) + <span class=\"string\">' '</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dateTime</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。</p>\n<h2 id=\"一：Date-对象基本方法示例：\"><a href=\"#一：Date-对象基本方法示例：\" class=\"headerlink\" title=\"一：Date()对象基本方法示例：\"></a>一：Date()对象基本方法示例：</h2>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Date()：返回当日的日期和时间。</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();<span class=\"comment\">//Thu Jul 19 2018 10:46:06 GMT+0800</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。</span></div><div class=\"line\">date.getDay();\t\t<span class=\"comment\">//4 今天是星期四</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getFullYear()：从 Date 对象以四位数字返回年份。</span></div><div class=\"line\">date.getFullYear();\t\t<span class=\"comment\">//2018</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getMonth()：从 Date 对象返回月份 (0 ~ 11)。</span></div><div class=\"line\">date.getMonth();\t\t<span class=\"comment\">//6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。</span></div><div class=\"line\">date.getDate();\t\t<span class=\"comment\">//19</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getHours()：返回 Date 对象的小时 (0 ~ 23)。</span></div><div class=\"line\">date.getHours();\t\t<span class=\"comment\">//10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。</span></div><div class=\"line\">date.getMinutes();\t\t<span class=\"comment\">//53</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。</span></div><div class=\"line\">date.getSeconds();\t\t<span class=\"comment\">//5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。</span></div><div class=\"line\">date.getMilliseconds();\t\t<span class=\"comment\">//522</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。</span></div><div class=\"line\">date.getTime();\t\t<span class=\"comment\">//1531968785522</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setFullYear()：设置 Date 对象中的年份（四位数字）。</span></div><div class=\"line\">date.setFullYear(<span class=\"number\">1995</span>); <span class=\"comment\">//1531968785522</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setMonth()：设置 Date 对象中月份 (0 ~ 11)。</span></div><div class=\"line\">date.setMonth(<span class=\"number\">8</span>); <span class=\"comment\">//Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。</span></div><div class=\"line\">date.setDate(<span class=\"number\">25</span>); <span class=\"comment\">//Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setTime()：以毫秒设置 Date 对象。</span></div><div class=\"line\">date.setTime(<span class=\"number\">77771564221</span>); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(date) <span class=\"comment\">//Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// toTimeString()：把 Date 对象的时间部分转换为字符串。</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(date.toTimeString()); =&gt; <span class=\"number\">11</span>:<span class=\"number\">58</span>:<span class=\"number\">45</span> GMT+<span class=\"number\">0800</span> (中国标准时间)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// toDateString()：把 Date 对象的日期部分转换为字符串。</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(date.toDateString()); =&gt; Thu Jul <span class=\"number\">19</span> <span class=\"number\">2018</span></div></pre></td></tr></table></figure>\n<h2 id=\"二：Date-对象组合高级用法：\"><a href=\"#二：Date-对象组合高级用法：\" class=\"headerlink\" title=\"二：Date()对象组合高级用法：\"></a>二：Date()对象组合高级用法：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dateFormat</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(seconds),</div><div class=\"line\">        year = date.getFullYear(),</div><div class=\"line\">        month = date.getMonth() + <span class=\"number\">1</span>,</div><div class=\"line\">        day = date.getDate(),</div><div class=\"line\">        hour = date.getHours(),</div><div class=\"line\">        min = date.getMinutes(),</div><div class=\"line\">        s = date.getSeconds();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span> <span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(s)&#125;</span>`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//转换为yyyy-MM-dd日期格式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dateFormatShort</span>(<span class=\"params\">date</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> year = date.getFullYear(),</div><div class=\"line\">    month = date.getMonth() + <span class=\"number\">1</span>,</div><div class=\"line\">    day = date.getDate();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span>`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将yyyy-MM-dd HH:mm:ss转化为毫秒数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatMilliseconds</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// str = '2018-7-19 15:14:30';</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>);<span class=\"comment\">//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)</span></div><div class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str);</div><div class=\"line\">    <span class=\"keyword\">return</span> date.getTime();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两个时间的秒数差</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SecondsDiff</span>(<span class=\"params\">startDate,endDate</span>)</span>&#123;</div><div class=\"line\">    startDate = <span class=\"string\">\"2018-7-18 10:56:23\"</span>,endDate = <span class=\"string\">\"2018-7-19 12:00:00\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> startTime = formatMilliseconds(startDate),<span class=\"comment\">//获得毫秒数</span></div><div class=\"line\">        endTime = formatMilliseconds(endDate),</div><div class=\"line\">        milliseconds = endTime - startTime;<span class=\"comment\">//毫秒数之差</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(milliseconds/<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久'dd天HH小时'）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secondsFormat</span>(<span class=\"params\">seconds</span>)</span>&#123;</div><div class=\"line\">    seconds = SecondsDiff();</div><div class=\"line\">    <span class=\"keyword\">let</span> day = <span class=\"built_in\">Math</span>.floor(seconds / <span class=\"number\">3600</span> / <span class=\"number\">24</span>),</div><div class=\"line\">        hour = <span class=\"built_in\">Math</span>.floor((seconds % <span class=\"number\">86400</span>) / <span class=\"number\">3600</span>),</div><div class=\"line\">        min = <span class=\"built_in\">Math</span>.floor((seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> ),</div><div class=\"line\">        second = <span class=\"built_in\">Math</span>.floor(seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</div><div class=\"line\">        hour += day * <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(second)&#125;</span>`</span>;<span class=\"comment\">//为什么只计算天数,因为一般活动只在相邻几天</span></div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//获得某月的天数　　 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMonthDays</span>(<span class=\"params\">year, month</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year,month,<span class=\"number\">0</span>),</div><div class=\"line\">        days = nowDate.getDate();</div><div class=\"line\">    <span class=\"keyword\">return</span> days;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//补0操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatNum</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> e &gt;= <span class=\"number\">10</span> ? e : <span class=\"string\">`0<span class=\"subst\">$&#123;e&#125;</span>`</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"三：对当前时间的判定：\"><a href=\"#三：对当前时间的判定：\" class=\"headerlink\" title=\"三：对当前时间的判定：\"></a>三：对当前时间的判定：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断时间是否是今天</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isToday</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">\"/\"</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (str.toDateString() === <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toDateString()) &#123;<span class=\"comment\">//今天</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str) &gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 判断某个时间是前天、昨天、今天、明天、后天</div><div class=\"line\">* @now:当前服务器时间</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">daysText</span>(<span class=\"params\">str,now</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> date = str.substring(<span class=\"number\">0</span>,str.indexOf(<span class=\"string\">\"-\"</span>)+<span class=\"number\">6</span>);</div><div class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(now.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>));</div><div class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(now.getFullYear(), now.getMonth(), now.getDate());</div><div class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>));</div><div class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(str.getFullYear(), str.getMonth(), str.getDate());</div><div class=\"line\">    <span class=\"keyword\">let</span> diff = (str - now) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"前天\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">-0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"昨天\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"今天\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"明日\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"后天\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> date;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否超过48小时</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">overTime</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> diffSeconds = <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - seconds)/<span class=\"number\">1000</span>),</div><div class=\"line\">        days = <span class=\"built_in\">Math</span>.floor(diffSeconds / <span class=\"number\">86400</span>),</div><div class=\"line\">        hour = <span class=\"built_in\">Math</span>.floor(diffSeconds % <span class=\"number\">86400</span> / <span class=\"number\">3600</span>),</div><div class=\"line\">        min = <span class=\"built_in\">Math</span>.floor((diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> )</div><div class=\"line\">        second = <span class=\"built_in\">Math</span>.floor(diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(days&gt;<span class=\"number\">2</span>)&#123;<span class=\"comment\">//超过两天超时</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(days==<span class=\"number\">2</span>)&#123; <span class=\"comment\">//刚好两天判断时分秒</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(hour==<span class=\"number\">0</span>)&#123; </div><div class=\"line\">            <span class=\"keyword\">if</span>(min==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(second==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余秒数，超时</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余分钟，超时</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//还有多余小时，超时</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//小于两天则没有超时</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 判断某个时间相对于现在过了多久</div><div class=\"line\"> * seconds:毫秒数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pastTimes</span>(<span class=\"params\">seconds</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//得到时间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> dateTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//传入时间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> starDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(seconds),</div><div class=\"line\">        starYear = starDate.getFullYear(), <span class=\"comment\">//年</span></div><div class=\"line\">        starMonth = starDate.getMonth() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></div><div class=\"line\">        starDay = starDate.getDate(),     <span class=\"comment\">//日</span></div><div class=\"line\">        starHour = starDate.getHours(),   <span class=\"comment\">//时</span></div><div class=\"line\">        starMin = starDate.getMinutes(),  <span class=\"comment\">//分</span></div><div class=\"line\">        starSen = starDate.getSeconds(); <span class=\"comment\">//秒</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//当前时间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">        nowYear = nowDate.getFullYear(), <span class=\"comment\">//年</span></div><div class=\"line\">        nowMonth = nowDate.getMonth() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></div><div class=\"line\">        nowDay = nowDate.getDate(),     <span class=\"comment\">//日</span></div><div class=\"line\">        nowHour = nowDate.getHours(),   <span class=\"comment\">//时</span></div><div class=\"line\">        nowMin = nowDate.getMinutes(),  <span class=\"comment\">//分</span></div><div class=\"line\">        nowSen = nowDate.getSeconds();  <span class=\"comment\">//秒</span></div><div class=\"line\">    <span class=\"comment\">//判断是否在同一年</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (starYear == nowYear) &#123;</div><div class=\"line\">        <span class=\"comment\">//判断是否是同一个月</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (starMonth == nowMonth) &#123;</div><div class=\"line\">             <span class=\"comment\">//判断在今天昨天或者前天</span></div><div class=\"line\">            <span class=\"keyword\">let</span> diffDay = nowDay - starDay;</div><div class=\"line\">            <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//今天</span></div><div class=\"line\">                <span class=\"comment\">//判断小时数</span></div><div class=\"line\">                <span class=\"keyword\">let</span> diffHours = nowHour - starHour;</div><div class=\"line\">                <span class=\"keyword\">let</span> diffMinutes = nowMin - starMin;</div><div class=\"line\">                <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">0</span> &amp;&amp; diffMinutes &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"刚刚\"</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        dateTime = diffMinutes + <span class=\"string\">\"分钟前\"</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">let</span> minute = (<span class=\"number\">60</span> - starMin) + (nowMin - <span class=\"number\">0</span>);</div><div class=\"line\">                        dateTime = minute + <span class=\"string\">\"分钟前\"</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"1个小时前\"</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                     <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"1个小时前\"</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        dateTime = <span class=\"string\">\"2个小时前\"</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    dateTime = formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(diffDay == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//昨天</span></div><div class=\"line\">                dateTime = <span class=\"string\">'昨天'</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">2</span>) &#123;<span class=\"comment\">//前天</span></div><div class=\"line\">                dateTime = <span class=\"string\">'前天'</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                dateTime = formatNum(starMonth) + <span class=\"string\">'-'</span> + formatNum(starDay) + <span class=\"string\">' '</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//不在同一个月且在同一年的不显示年份</span></div><div class=\"line\">            dateTime = formatNum(starMonth) + <span class=\"string\">'-'</span> + formatNum(starDay) + <span class=\"string\">' '</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//不在同一年的显示年月日时分</span></div><div class=\"line\">        dateTime = starYear + <span class=\"string\">'-'</span> + formatNum(starMonth) + <span class=\"string\">'-'</span> + formatNum(starDay) + <span class=\"string\">' '</span> + formatNum(starHour) + <span class=\"string\">':'</span> + formatNum(starMin);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dateTime</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Qiniu-image-tool-实现图片一键上传七牛云","author":"熊 超","date":"2018-07-02T06:12:00.000Z","_content":"\n\n&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。\n&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。\n\n<!--more-->\n\n\n### 用法\n1. 复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.\n2. 切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）\n\n### 预览效果图：\n* 本地图片文件上传\n![](http://or87vteh1.bkt.clouddn.com/local.gif)\n\n* 截图上传\n![](http://or87vteh1.bkt.clouddn.com/screenshot.gif)\n\n* 其它文件上传\n![](http://or87vteh1.bkt.clouddn.com/file.gif)\n\n### 安装\n首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录\n\n目录结构应如下：\n![](http://or87vteh1.bkt.clouddn.com/201808021402_157.png)\n\n其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。\n\n### 配置脚本\n\n打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:\n\n![](http://or87vteh1.bkt.clouddn.com/201808021405_405.png)\n\n修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：\n\nACCESS_KEY & SECRET_KEY\n这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板->密钥管理中查看，或者直接访问查看。\n\nBUCKET_NAME & BUCKET_DOMAIN\n在对象存储->存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 ***http头 *** 和最后的那个 斜杠。\n\n\n### 运行脚本\n配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。\n\n### 调试\n如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE = false 改为DEBUG_MODE = true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。\n","source":"_posts/Qiniu-image-tool-实现图片一键上传七牛云.md","raw":"title: Qiniu-image-tool-实现图片一键上传七牛云\nauthor: 熊 超\ntags:\n  - upload\ncategories:\n  - 云储存\ndate: 2018-07-02 14:12:00\n---\n\n\n&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。\n&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。\n\n<!--more-->\n\n\n### 用法\n1. 复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.\n2. 切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）\n\n### 预览效果图：\n* 本地图片文件上传\n![](http://or87vteh1.bkt.clouddn.com/local.gif)\n\n* 截图上传\n![](http://or87vteh1.bkt.clouddn.com/screenshot.gif)\n\n* 其它文件上传\n![](http://or87vteh1.bkt.clouddn.com/file.gif)\n\n### 安装\n首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录\n\n目录结构应如下：\n![](http://or87vteh1.bkt.clouddn.com/201808021402_157.png)\n\n其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。\n\n### 配置脚本\n\n打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:\n\n![](http://or87vteh1.bkt.clouddn.com/201808021405_405.png)\n\n修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：\n\nACCESS_KEY & SECRET_KEY\n这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板->密钥管理中查看，或者直接访问查看。\n\nBUCKET_NAME & BUCKET_DOMAIN\n在对象存储->存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 ***http头 *** 和最后的那个 斜杠。\n\n\n### 运行脚本\n配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。\n\n### 调试\n如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE = false 改为DEBUG_MODE = true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。\n","slug":"Qiniu-image-tool-实现图片一键上传七牛云","published":1,"updated":"2018-08-08T10:08:23.156Z","_id":"cjkkvi5nc0008i0nfigsx5ey2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。<br>&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。</p>\n<a id=\"more\"></a>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ol>\n<li>复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.</li>\n<li>切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）</li>\n</ol>\n<h3 id=\"预览效果图：\"><a href=\"#预览效果图：\" class=\"headerlink\" title=\"预览效果图：\"></a>预览效果图：</h3><ul>\n<li><p>本地图片文件上传<br><img src=\"http://or87vteh1.bkt.clouddn.com/local.gif\" alt=\"\"></p>\n</li>\n<li><p>截图上传<br><img src=\"http://or87vteh1.bkt.clouddn.com/screenshot.gif\" alt=\"\"></p>\n</li>\n<li><p>其它文件上传<br><img src=\"http://or87vteh1.bkt.clouddn.com/file.gif\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录</p>\n<p>目录结构应如下：<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808021402_157.png\" alt=\"\"></p>\n<p>其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。</p>\n<h3 id=\"配置脚本\"><a href=\"#配置脚本\" class=\"headerlink\" title=\"配置脚本\"></a>配置脚本</h3><p>打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/201808021405_405.png\" alt=\"\"></p>\n<p>修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：</p>\n<p>ACCESS_KEY &amp; SECRET_KEY<br>这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板-&gt;密钥管理中查看，或者直接访问查看。</p>\n<p>BUCKET_NAME &amp; BUCKET_DOMAIN<br>在对象存储-&gt;存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 <strong><em>http头 </em></strong> 和最后的那个 斜杠。</p>\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><p>配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE = false 改为DEBUG_MODE = true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。</p>\n","site":{"data":{}},"excerpt":"<p>&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。<br>&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。</p>","more":"<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ol>\n<li>复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.</li>\n<li>切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）</li>\n</ol>\n<h3 id=\"预览效果图：\"><a href=\"#预览效果图：\" class=\"headerlink\" title=\"预览效果图：\"></a>预览效果图：</h3><ul>\n<li><p>本地图片文件上传<br><img src=\"http://or87vteh1.bkt.clouddn.com/local.gif\" alt=\"\"></p>\n</li>\n<li><p>截图上传<br><img src=\"http://or87vteh1.bkt.clouddn.com/screenshot.gif\" alt=\"\"></p>\n</li>\n<li><p>其它文件上传<br><img src=\"http://or87vteh1.bkt.clouddn.com/file.gif\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录</p>\n<p>目录结构应如下：<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808021402_157.png\" alt=\"\"></p>\n<p>其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。</p>\n<h3 id=\"配置脚本\"><a href=\"#配置脚本\" class=\"headerlink\" title=\"配置脚本\"></a>配置脚本</h3><p>打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/201808021405_405.png\" alt=\"\"></p>\n<p>修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：</p>\n<p>ACCESS_KEY &amp; SECRET_KEY<br>这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板-&gt;密钥管理中查看，或者直接访问查看。</p>\n<p>BUCKET_NAME &amp; BUCKET_DOMAIN<br>在对象存储-&gt;存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 <strong><em>http头 </em></strong> 和最后的那个 斜杠。</p>\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><p>配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE = false 改为DEBUG_MODE = true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。</p>"},{"title":"js 将对象数组中具有相同值的对象取出组成新的数组","author":"熊 超","date":"2018-07-26T06:58:00.000Z","_content":"\n### 实现方法：\n```js\nlet arr = [\n  {\n    \"id\": 577,\n    \"name\": \"艾杜纱 毛孔洁净洗面奶\",\n    \"skuName\": \"125mL\",\n    \"image\": \"commodityImage/haZW5gLF.jpg\",\n    \"price\": 122.32,\n    \"store\": 327,\n    \"status\": 1,\n    \"brandId\": 18,\n    \"categoryId\": 32\n  }, {\n    \"id\": 536,\n    \"name\": \"心机彩妆 星魅霓光唇膏\",\n    \"skuName\": \"BE300\",\n    \"image\": \"commodityImage/ibg54OOx.jpg\",\n    \"price\": 273.65,\n    \"store\": 50,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 33\n  }, {\n    \"id\": 546,\n    \"name\": \"心机彩妆 炫眉膏\",\n    \"skuName\": \"77\",\n    \"image\": \"commodityImage/356LBmxe.jpg\",\n    \"price\": 160.68,\n    \"store\": 20,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 20\n  }\n]\n\nconsole.log(arr,'原始数组');\nconsole.log(sortArr(arr, 'brandId'),'转化后的数组');\n\n/**\n* arr 要转化的数组\n* key 根据某一键转化\n*/\nfunction sortArr(arr, key) {\n  let newArr = [],\n      tempArr = [],\n      temp;\n\n  // 按照特定的参数将数组排序，将具有相同值的排在一起\n  arr = arr.sort(function(a, b) {\n      let s = a[key],\n          t = b[key];\n\n      return s < t ? -1 : 1;\n  });\n  console.log(arr,\"排序之后的数组\");\n\n  if ( arr.length ){\n      temp = arr[0][key];\n  }\n\n  // 将相同类别的对象添加到统一个数组\n  for (let i in arr) {\n      if ( arr[i][key] === temp ){\n          tempArr.push( arr[i] );\n      } else {\n          temp = arr[i][key];\n          newArr.push(tempArr);\n          tempArr = [arr[i]];\n      }\n  }\n  // 将最后的内容推出新数组\n  newArr.push(tempArr);\n  return newArr;\n}\n\n```\n<!--more-->\n### 结果：\n\n![](http://or87vteh1.bkt.clouddn.com/201807271015_408.png)\n![](http://or87vteh1.bkt.clouddn.com/201807271015_241.png)\n","source":"_posts/js-将对象数组中具有相同值的对象取出组成新的数组.md","raw":"title: js 将对象数组中具有相同值的对象取出组成新的数组\nauthor: 熊 超\ntags:\n  - js\n  - Array\ncategories:\n  - javascript\ndate: 2018-07-26 14:58:00\n---\n\n### 实现方法：\n```js\nlet arr = [\n  {\n    \"id\": 577,\n    \"name\": \"艾杜纱 毛孔洁净洗面奶\",\n    \"skuName\": \"125mL\",\n    \"image\": \"commodityImage/haZW5gLF.jpg\",\n    \"price\": 122.32,\n    \"store\": 327,\n    \"status\": 1,\n    \"brandId\": 18,\n    \"categoryId\": 32\n  }, {\n    \"id\": 536,\n    \"name\": \"心机彩妆 星魅霓光唇膏\",\n    \"skuName\": \"BE300\",\n    \"image\": \"commodityImage/ibg54OOx.jpg\",\n    \"price\": 273.65,\n    \"store\": 50,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 33\n  }, {\n    \"id\": 546,\n    \"name\": \"心机彩妆 炫眉膏\",\n    \"skuName\": \"77\",\n    \"image\": \"commodityImage/356LBmxe.jpg\",\n    \"price\": 160.68,\n    \"store\": 20,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 20\n  }\n]\n\nconsole.log(arr,'原始数组');\nconsole.log(sortArr(arr, 'brandId'),'转化后的数组');\n\n/**\n* arr 要转化的数组\n* key 根据某一键转化\n*/\nfunction sortArr(arr, key) {\n  let newArr = [],\n      tempArr = [],\n      temp;\n\n  // 按照特定的参数将数组排序，将具有相同值的排在一起\n  arr = arr.sort(function(a, b) {\n      let s = a[key],\n          t = b[key];\n\n      return s < t ? -1 : 1;\n  });\n  console.log(arr,\"排序之后的数组\");\n\n  if ( arr.length ){\n      temp = arr[0][key];\n  }\n\n  // 将相同类别的对象添加到统一个数组\n  for (let i in arr) {\n      if ( arr[i][key] === temp ){\n          tempArr.push( arr[i] );\n      } else {\n          temp = arr[i][key];\n          newArr.push(tempArr);\n          tempArr = [arr[i]];\n      }\n  }\n  // 将最后的内容推出新数组\n  newArr.push(tempArr);\n  return newArr;\n}\n\n```\n<!--more-->\n### 结果：\n\n![](http://or87vteh1.bkt.clouddn.com/201807271015_408.png)\n![](http://or87vteh1.bkt.clouddn.com/201807271015_241.png)\n","slug":"js-将对象数组中具有相同值的对象取出组成新的数组","published":1,"updated":"2018-08-08T10:11:20.333Z","_id":"cjkkvi5nf000ci0nfpmw2nt4s","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"实现方法：\"><a href=\"#实现方法：\" class=\"headerlink\" title=\"实现方法：\"></a>实现方法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">577</span>,</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"艾杜纱 毛孔洁净洗面奶\"</span>,</div><div class=\"line\">    <span class=\"string\">\"skuName\"</span>: <span class=\"string\">\"125mL\"</span>,</div><div class=\"line\">    <span class=\"string\">\"image\"</span>: <span class=\"string\">\"commodityImage/haZW5gLF.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">122.32</span>,</div><div class=\"line\">    <span class=\"string\">\"store\"</span>: <span class=\"number\">327</span>,</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"brandId\"</span>: <span class=\"number\">18</span>,</div><div class=\"line\">    <span class=\"string\">\"categoryId\"</span>: <span class=\"number\">32</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">536</span>,</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"心机彩妆 星魅霓光唇膏\"</span>,</div><div class=\"line\">    <span class=\"string\">\"skuName\"</span>: <span class=\"string\">\"BE300\"</span>,</div><div class=\"line\">    <span class=\"string\">\"image\"</span>: <span class=\"string\">\"commodityImage/ibg54OOx.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">273.65</span>,</div><div class=\"line\">    <span class=\"string\">\"store\"</span>: <span class=\"number\">50</span>,</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"brandId\"</span>: <span class=\"number\">17</span>,</div><div class=\"line\">    <span class=\"string\">\"categoryId\"</span>: <span class=\"number\">33</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">546</span>,</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"心机彩妆 炫眉膏\"</span>,</div><div class=\"line\">    <span class=\"string\">\"skuName\"</span>: <span class=\"string\">\"77\"</span>,</div><div class=\"line\">    <span class=\"string\">\"image\"</span>: <span class=\"string\">\"commodityImage/356LBmxe.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">160.68</span>,</div><div class=\"line\">    <span class=\"string\">\"store\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"brandId\"</span>: <span class=\"number\">17</span>,</div><div class=\"line\">    <span class=\"string\">\"categoryId\"</span>: <span class=\"number\">20</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr,<span class=\"string\">'原始数组'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(sortArr(arr, <span class=\"string\">'brandId'</span>),<span class=\"string\">'转化后的数组'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* arr 要转化的数组</div><div class=\"line\">* key 根据某一键转化</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortArr</span>(<span class=\"params\">arr, key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> newArr = [],</div><div class=\"line\">      tempArr = [],</div><div class=\"line\">      temp;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按照特定的参数将数组排序，将具有相同值的排在一起</span></div><div class=\"line\">  arr = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> s = a[key],</div><div class=\"line\">          t = b[key];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> s &lt; t ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(arr,<span class=\"string\">\"排序之后的数组\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> ( arr.length )&#123;</div><div class=\"line\">      temp = arr[<span class=\"number\">0</span>][key];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 将相同类别的对象添加到统一个数组</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( arr[i][key] === temp )&#123;</div><div class=\"line\">          tempArr.push( arr[i] );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          temp = arr[i][key];</div><div class=\"line\">          newArr.push(tempArr);</div><div class=\"line\">          tempArr = [arr[i]];</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 将最后的内容推出新数组</span></div><div class=\"line\">  newArr.push(tempArr);</div><div class=\"line\">  <span class=\"keyword\">return</span> newArr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><p><img src=\"http://or87vteh1.bkt.clouddn.com/201807271015_408.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201807271015_241.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"实现方法：\"><a href=\"#实现方法：\" class=\"headerlink\" title=\"实现方法：\"></a>实现方法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">577</span>,</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"艾杜纱 毛孔洁净洗面奶\"</span>,</div><div class=\"line\">    <span class=\"string\">\"skuName\"</span>: <span class=\"string\">\"125mL\"</span>,</div><div class=\"line\">    <span class=\"string\">\"image\"</span>: <span class=\"string\">\"commodityImage/haZW5gLF.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">122.32</span>,</div><div class=\"line\">    <span class=\"string\">\"store\"</span>: <span class=\"number\">327</span>,</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"brandId\"</span>: <span class=\"number\">18</span>,</div><div class=\"line\">    <span class=\"string\">\"categoryId\"</span>: <span class=\"number\">32</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">536</span>,</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"心机彩妆 星魅霓光唇膏\"</span>,</div><div class=\"line\">    <span class=\"string\">\"skuName\"</span>: <span class=\"string\">\"BE300\"</span>,</div><div class=\"line\">    <span class=\"string\">\"image\"</span>: <span class=\"string\">\"commodityImage/ibg54OOx.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">273.65</span>,</div><div class=\"line\">    <span class=\"string\">\"store\"</span>: <span class=\"number\">50</span>,</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"brandId\"</span>: <span class=\"number\">17</span>,</div><div class=\"line\">    <span class=\"string\">\"categoryId\"</span>: <span class=\"number\">33</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">546</span>,</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"心机彩妆 炫眉膏\"</span>,</div><div class=\"line\">    <span class=\"string\">\"skuName\"</span>: <span class=\"string\">\"77\"</span>,</div><div class=\"line\">    <span class=\"string\">\"image\"</span>: <span class=\"string\">\"commodityImage/356LBmxe.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">160.68</span>,</div><div class=\"line\">    <span class=\"string\">\"store\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"brandId\"</span>: <span class=\"number\">17</span>,</div><div class=\"line\">    <span class=\"string\">\"categoryId\"</span>: <span class=\"number\">20</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr,<span class=\"string\">'原始数组'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(sortArr(arr, <span class=\"string\">'brandId'</span>),<span class=\"string\">'转化后的数组'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* arr 要转化的数组</div><div class=\"line\">* key 根据某一键转化</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortArr</span>(<span class=\"params\">arr, key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> newArr = [],</div><div class=\"line\">      tempArr = [],</div><div class=\"line\">      temp;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按照特定的参数将数组排序，将具有相同值的排在一起</span></div><div class=\"line\">  arr = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> s = a[key],</div><div class=\"line\">          t = b[key];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> s &lt; t ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(arr,<span class=\"string\">\"排序之后的数组\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> ( arr.length )&#123;</div><div class=\"line\">      temp = arr[<span class=\"number\">0</span>][key];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 将相同类别的对象添加到统一个数组</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( arr[i][key] === temp )&#123;</div><div class=\"line\">          tempArr.push( arr[i] );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          temp = arr[i][key];</div><div class=\"line\">          newArr.push(tempArr);</div><div class=\"line\">          tempArr = [arr[i]];</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 将最后的内容推出新数组</span></div><div class=\"line\">  newArr.push(tempArr);</div><div class=\"line\">  <span class=\"keyword\">return</span> newArr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><p><img src=\"http://or87vteh1.bkt.clouddn.com/201807271015_408.png\" alt=\"\"><br><img src=\"http://or87vteh1.bkt.clouddn.com/201807271015_241.png\" alt=\"\"></p>"},{"title":"js经典排序算法","author":"熊 超","date":"2018-07-27T07:19:00.000Z","_content":"### 1.冒泡排序（Bubble Sort）\n\n冒泡排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-e19840224b331fae.gif)\n\n```\n定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。\n对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。\nN=N-1，如果N不为0就重复前面二步，否则排序完成。\n```\n```js\nfunction bubbleSort(arr){\n    var len = arr.length;\n    for(var i = 0;i < len;i++){\n        for(var j = 0;j < len - 1 - i;j++){\n            if(arr[j]>arr[j+1]){\n                var temp = arr[j];\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n```\n<!--more-->\n\n### 2.选择排序（Selection Sort）\n\n选择排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-c6cc220cfb2b9ac8.gif)\n\n```js\n/**\n* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与\n* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元\n* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，\n* 至此选择排序完成。\n*/\nfunction selectSort(arr){\n    var min,temp;\n    for(var i=0;i<arr.length-1;i++){\n        min=i;\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[j]<arr[min]){\n                min = j;\n            }\n        }\n        temp=arr[i];\n        arr[i]=arr[min];\n        arr[min]=temp;\n\n    }\n    return arr;\n}\n```\n\n### 3.插入排序（Insertion Sort）\n\n插入排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-d1537e355abdd298.gif)\n\n```\n从第一个元素开始，该元素可以认为已经被排序； \n取出下一个元素，在已经排序的元素序列中从后向前扫描； \n如果该元素（已排序）大于新元素，将该元素移到下一位置； \n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； \n将新元素插入到该位置后； \n重复步骤2~5。\n```\n```js\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n```\n\n### 4.快速排序（Quick Sort）\n快速排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-cd65e35d7dce5045.gif)\n\n```\n先从数列中取出一个数作为基准数。\n分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。\n再对左右区间重复第二步，直到各区间只有一个数。\n```\n\n```js\nfunction quickSort(arr){\n    if(arr.length<2){\n        return arr\n    }\n    var left=[],right=[],mid=arr.splice(Math.floor(arr.length/2),1);\n    for(var i=0;i<arr.length;i++){\n            if(arr[i]<mid){\n                left.push(arr[i]);\n            }else {\n                right.push(arr[i])\n            }\n    }\n    return bubbleSort(left).concat(mid,bubbleSort(right))\n  }\n```","source":"_posts/js经典算法.md","raw":"title: js经典排序算法\nauthor: 熊 超\ntags:\n  - Array\n  - sort\ncategories:\n  - 算法\ndate: 2018-07-27 15:19:00\n---\n### 1.冒泡排序（Bubble Sort）\n\n冒泡排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-e19840224b331fae.gif)\n\n```\n定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。\n对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。\nN=N-1，如果N不为0就重复前面二步，否则排序完成。\n```\n```js\nfunction bubbleSort(arr){\n    var len = arr.length;\n    for(var i = 0;i < len;i++){\n        for(var j = 0;j < len - 1 - i;j++){\n            if(arr[j]>arr[j+1]){\n                var temp = arr[j];\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n```\n<!--more-->\n\n### 2.选择排序（Selection Sort）\n\n选择排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-c6cc220cfb2b9ac8.gif)\n\n```js\n/**\n* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与\n* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元\n* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，\n* 至此选择排序完成。\n*/\nfunction selectSort(arr){\n    var min,temp;\n    for(var i=0;i<arr.length-1;i++){\n        min=i;\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[j]<arr[min]){\n                min = j;\n            }\n        }\n        temp=arr[i];\n        arr[i]=arr[min];\n        arr[min]=temp;\n\n    }\n    return arr;\n}\n```\n\n### 3.插入排序（Insertion Sort）\n\n插入排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-d1537e355abdd298.gif)\n\n```\n从第一个元素开始，该元素可以认为已经被排序； \n取出下一个元素，在已经排序的元素序列中从后向前扫描； \n如果该元素（已排序）大于新元素，将该元素移到下一位置； \n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； \n将新元素插入到该位置后； \n重复步骤2~5。\n```\n```js\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n```\n\n### 4.快速排序（Quick Sort）\n快速排序动图演示：\n![](http://or87vteh1.bkt.clouddn.com/1867034-cd65e35d7dce5045.gif)\n\n```\n先从数列中取出一个数作为基准数。\n分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。\n再对左右区间重复第二步，直到各区间只有一个数。\n```\n\n```js\nfunction quickSort(arr){\n    if(arr.length<2){\n        return arr\n    }\n    var left=[],right=[],mid=arr.splice(Math.floor(arr.length/2),1);\n    for(var i=0;i<arr.length;i++){\n            if(arr[i]<mid){\n                left.push(arr[i]);\n            }else {\n                right.push(arr[i])\n            }\n    }\n    return bubbleSort(left).concat(mid,bubbleSort(right))\n  }\n```","slug":"js经典算法","published":1,"updated":"2018-08-08T10:10:50.838Z","_id":"cjkkvi5nh000ei0nfkf64fj5p","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1.冒泡排序（Bubble Sort）\"></a>1.冒泡排序（Bubble Sort）</h3><p>冒泡排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-e19840224b331fae.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。</div><div class=\"line\">对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。</div><div class=\"line\">N=N-1，如果N不为0就重复前面二步，否则排序完成。</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; len - <span class=\"number\">1</span> - i;j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</div><div class=\"line\">                arr[j] = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"2-选择排序（Selection-Sort）\"><a href=\"#2-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"2.选择排序（Selection Sort）\"></a>2.选择排序（Selection Sort）</h3><p>选择排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-c6cc220cfb2b9ac8.gif\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与</div><div class=\"line\">* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元</div><div class=\"line\">* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，</div><div class=\"line\">* 至此选择排序完成。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> min,temp;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length<span class=\"number\">-1</span>;i++)&#123;</div><div class=\"line\">        min=i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;arr.length;j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&lt;arr[min])&#123;</div><div class=\"line\">                min = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        temp=arr[i];</div><div class=\"line\">        arr[i]=arr[min];</div><div class=\"line\">        arr[min]=temp;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-插入排序（Insertion-Sort）\"><a href=\"#3-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"3.插入排序（Insertion Sort）\"></a>3.插入排序（Insertion Sort）</h3><p>插入排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-d1537e355abdd298.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">从第一个元素开始，该元素可以认为已经被排序； </div><div class=\"line\">取出下一个元素，在已经排序的元素序列中从后向前扫描； </div><div class=\"line\">如果该元素（已排序）大于新元素，将该元素移到下一位置； </div><div class=\"line\">重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； </div><div class=\"line\">将新元素插入到该位置后； </div><div class=\"line\">重复步骤2~5。</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        preIndex = i - <span class=\"number\">1</span>;</div><div class=\"line\">        current = arr[i];</div><div class=\"line\">        <span class=\"keyword\">while</span>(preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex];</div><div class=\"line\">            preIndex--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-快速排序（Quick-Sort）\"><a href=\"#4-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"4.快速排序（Quick Sort）\"></a>4.快速排序（Quick Sort）</h3><p>快速排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-cd65e35d7dce5045.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">先从数列中取出一个数作为基准数。</div><div class=\"line\">分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</div><div class=\"line\">再对左右区间重复第二步，直到各区间只有一个数。</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> left=[],right=[],mid=arr.splice(<span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>),<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[i]&lt;mid)&#123;</div><div class=\"line\">                left.push(arr[i]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                right.push(arr[i])</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bubbleSort(left).concat(mid,bubbleSort(right))</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1.冒泡排序（Bubble Sort）\"></a>1.冒泡排序（Bubble Sort）</h3><p>冒泡排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-e19840224b331fae.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。</div><div class=\"line\">对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。</div><div class=\"line\">N=N-1，如果N不为0就重复前面二步，否则排序完成。</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; len - <span class=\"number\">1</span> - i;j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</div><div class=\"line\">                arr[j] = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h3 id=\"2-选择排序（Selection-Sort）\"><a href=\"#2-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"2.选择排序（Selection Sort）\"></a>2.选择排序（Selection Sort）</h3><p>选择排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-c6cc220cfb2b9ac8.gif\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与</div><div class=\"line\">* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元</div><div class=\"line\">* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，</div><div class=\"line\">* 至此选择排序完成。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> min,temp;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length<span class=\"number\">-1</span>;i++)&#123;</div><div class=\"line\">        min=i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;arr.length;j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&lt;arr[min])&#123;</div><div class=\"line\">                min = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        temp=arr[i];</div><div class=\"line\">        arr[i]=arr[min];</div><div class=\"line\">        arr[min]=temp;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-插入排序（Insertion-Sort）\"><a href=\"#3-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"3.插入排序（Insertion Sort）\"></a>3.插入排序（Insertion Sort）</h3><p>插入排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-d1537e355abdd298.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">从第一个元素开始，该元素可以认为已经被排序； </div><div class=\"line\">取出下一个元素，在已经排序的元素序列中从后向前扫描； </div><div class=\"line\">如果该元素（已排序）大于新元素，将该元素移到下一位置； </div><div class=\"line\">重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； </div><div class=\"line\">将新元素插入到该位置后； </div><div class=\"line\">重复步骤2~5。</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        preIndex = i - <span class=\"number\">1</span>;</div><div class=\"line\">        current = arr[i];</div><div class=\"line\">        <span class=\"keyword\">while</span>(preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex];</div><div class=\"line\">            preIndex--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-快速排序（Quick-Sort）\"><a href=\"#4-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"4.快速排序（Quick Sort）\"></a>4.快速排序（Quick Sort）</h3><p>快速排序动图演示：<br><img src=\"http://or87vteh1.bkt.clouddn.com/1867034-cd65e35d7dce5045.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">先从数列中取出一个数作为基准数。</div><div class=\"line\">分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</div><div class=\"line\">再对左右区间重复第二步，直到各区间只有一个数。</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> left=[],right=[],mid=arr.splice(<span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>),<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr[i]&lt;mid)&#123;</div><div class=\"line\">                left.push(arr[i]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                right.push(arr[i])</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bubbleSort(left).concat(mid,bubbleSort(right))</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>"},{"title":"js跳出循环总结","author":"熊 超","date":"2018-07-31T01:53:00.000Z","_content":"\n## 一.跳出一层循环\n```js\nvar arr = [\"a\", \"b\",'c','d'];\n```\n### 结束for循环\n```js\nfor(var i=0;i<arr.length;i++){\n  if(i==2){\n      break;\n  }\n  console.log(arr[i],i);\n}\nconsole.log('循环外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n### 结束forEach循环\n```js\ntry {\n    arr.forEach((o,i) => {\n        if(i==2){\n            throw new Error(\"EndIterative\");\n        }\n        console.log(o,i);\n    });\n} catch (e) {\n    if(e.message!='EndIterative'){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n\n<!--more-->\n\n注意：return 只能结束本次循环，并不能终止整个循环\n\n### 结束for...in循环\n```js\nfor (var i in arr) {\n    if(i==2){\n        break;\n    }\n    console.log(arr[i],i);\n}\nconsole.log('循环体外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n##### 结果：\n![mark](http://or87vteh1.bkt.clouddn.com/201807311448_240.png)\n\n## 二.跳出多层循环\n```js\nvar arr = [[\"a\", \"b\", \"c\"],[\"小红\", \"小明\", \"小亮\"]];\n```\n### 正常多层for循环\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n        console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log(\"循环体外\");\n```\n#####结果：\n![mark](http://or87vteh1.bkt.clouddn.com/201808010918_525.png)\n\n### 使用break\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==i){\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只跳出了一层循环\n\n![mark](http://or87vteh1.bkt.clouddn.com/201807311606_181.png)\n\n### 我们可以使用以下方法跳出多层for循环\n```js\nvar flag = false;\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          flag = true;\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    if(flag){\n        break;\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只执行了一次j=0就结束了循环\n![mark](http://or87vteh1.bkt.clouddn.com/201808010928_686.png)\n\n### 使用return\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          return;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log('我在循环体外');\n```\n结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行\n\n![mark](http://or87vteh1.bkt.clouddn.com/201807311646_81.png)\n\n### 跳出多层forEach循环\n```js\ntry {\n    arr.forEach((newArr,i) => {\n        newArr.forEach((o,j)=>{\n            if(j==1){\n                throw new Error(\"EndIterative\");\n            }\n            console.log(o,'内层')\n        });\n        console.log(newArr,'外层');\n    });\n} catch (e) {\n    if(e.message!=\"EndIterative\"){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n结果： 正确跳出了多层循环\n![mark](http://or87vteh1.bkt.clouddn.com/201808010928_686.png)\n\n## 最后总结：\n1. break只能在for、for...in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；\n2. return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。\n\n","source":"_posts/js跳出循环总结.md","raw":"title: js跳出循环总结\nauthor: 熊 超\ntags:\n  - Array\n  - 循环\ncategories:\n  - javascript\ndate: 2018-07-31 09:53:00\n---\n\n## 一.跳出一层循环\n```js\nvar arr = [\"a\", \"b\",'c','d'];\n```\n### 结束for循环\n```js\nfor(var i=0;i<arr.length;i++){\n  if(i==2){\n      break;\n  }\n  console.log(arr[i],i);\n}\nconsole.log('循环外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n### 结束forEach循环\n```js\ntry {\n    arr.forEach((o,i) => {\n        if(i==2){\n            throw new Error(\"EndIterative\");\n        }\n        console.log(o,i);\n    });\n} catch (e) {\n    if(e.message!='EndIterative'){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n\n<!--more-->\n\n注意：return 只能结束本次循环，并不能终止整个循环\n\n### 结束for...in循环\n```js\nfor (var i in arr) {\n    if(i==2){\n        break;\n    }\n    console.log(arr[i],i);\n}\nconsole.log('循环体外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n##### 结果：\n![mark](http://or87vteh1.bkt.clouddn.com/201807311448_240.png)\n\n## 二.跳出多层循环\n```js\nvar arr = [[\"a\", \"b\", \"c\"],[\"小红\", \"小明\", \"小亮\"]];\n```\n### 正常多层for循环\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n        console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log(\"循环体外\");\n```\n#####结果：\n![mark](http://or87vteh1.bkt.clouddn.com/201808010918_525.png)\n\n### 使用break\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==i){\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只跳出了一层循环\n\n![mark](http://or87vteh1.bkt.clouddn.com/201807311606_181.png)\n\n### 我们可以使用以下方法跳出多层for循环\n```js\nvar flag = false;\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          flag = true;\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    if(flag){\n        break;\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只执行了一次j=0就结束了循环\n![mark](http://or87vteh1.bkt.clouddn.com/201808010928_686.png)\n\n### 使用return\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          return;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log('我在循环体外');\n```\n结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行\n\n![mark](http://or87vteh1.bkt.clouddn.com/201807311646_81.png)\n\n### 跳出多层forEach循环\n```js\ntry {\n    arr.forEach((newArr,i) => {\n        newArr.forEach((o,j)=>{\n            if(j==1){\n                throw new Error(\"EndIterative\");\n            }\n            console.log(o,'内层')\n        });\n        console.log(newArr,'外层');\n    });\n} catch (e) {\n    if(e.message!=\"EndIterative\"){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n结果： 正确跳出了多层循环\n![mark](http://or87vteh1.bkt.clouddn.com/201808010928_686.png)\n\n## 最后总结：\n1. break只能在for、for...in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；\n2. return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。\n\n","slug":"js跳出循环总结","published":1,"updated":"2018-08-08T10:08:18.870Z","_id":"cjkkvi5nj000hi0nf1j5oynt4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-跳出一层循环\"><a href=\"#一-跳出一层循环\" class=\"headerlink\" title=\"一.跳出一层循环\"></a>一.跳出一层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>];</div></pre></td></tr></table></figure>\n<h3 id=\"结束for循环\"><a href=\"#结束for循环\" class=\"headerlink\" title=\"结束for循环\"></a>结束for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i],i);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环外'</span>);</div></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h3 id=\"结束forEach循环\"><a href=\"#结束forEach循环\" class=\"headerlink\" title=\"结束forEach循环\"></a>结束forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    arr.forEach(<span class=\"function\">(<span class=\"params\">o,i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"EndIterative\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(o,i);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.message!=<span class=\"string\">'EndIterative'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环体外'</span>);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>注意：return 只能结束本次循环，并不能终止整个循环</p>\n<h3 id=\"结束for…in循环\"><a href=\"#结束for…in循环\" class=\"headerlink\" title=\"结束for…in循环\"></a>结束for…in循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i],i);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环体外'</span>);</div></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img src=\"http://or87vteh1.bkt.clouddn.com/201807311448_240.png\" alt=\"mark\"></p>\n<h2 id=\"二-跳出多层循环\"><a href=\"#二-跳出多层循环\" class=\"headerlink\" title=\"二.跳出多层循环\"></a>二.跳出多层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],[<span class=\"string\">\"小红\"</span>, <span class=\"string\">\"小明\"</span>, <span class=\"string\">\"小亮\"</span>]];</div></pre></td></tr></table></figure>\n<h3 id=\"正常多层for循环\"><a href=\"#正常多层for循环\" class=\"headerlink\" title=\"正常多层for循环\"></a>正常多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"循环体外\"</span>);</div></pre></td></tr></table></figure>\n<p>#####结果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808010918_525.png\" alt=\"mark\"></p>\n<h3 id=\"使用break\"><a href=\"#使用break\" class=\"headerlink\" title=\"使用break\"></a>使用break</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(j==i)&#123;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果： 只跳出了一层循环</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/201807311606_181.png\" alt=\"mark\"></p>\n<h3 id=\"我们可以使用以下方法跳出多层for循环\"><a href=\"#我们可以使用以下方法跳出多层for循环\" class=\"headerlink\" title=\"我们可以使用以下方法跳出多层for循环\"></a>我们可以使用以下方法跳出多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">          flag = <span class=\"literal\">true</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果： 只执行了一次j=0就结束了循环<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808010928_686.png\" alt=\"mark\"></p>\n<h3 id=\"使用return\"><a href=\"#使用return\" class=\"headerlink\" title=\"使用return\"></a>使用return</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'我在循环体外'</span>);</div></pre></td></tr></table></figure>\n<p>结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/201807311646_81.png\" alt=\"mark\"></p>\n<h3 id=\"跳出多层forEach循环\"><a href=\"#跳出多层forEach循环\" class=\"headerlink\" title=\"跳出多层forEach循环\"></a>跳出多层forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    arr.forEach(<span class=\"function\">(<span class=\"params\">newArr,i</span>) =&gt;</span> &#123;</div><div class=\"line\">        newArr.forEach(<span class=\"function\">(<span class=\"params\">o,j</span>)=&gt;</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"EndIterative\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(o,<span class=\"string\">'内层'</span>)</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(newArr,<span class=\"string\">'外层'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.message!=<span class=\"string\">\"EndIterative\"</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环体外'</span>);</div></pre></td></tr></table></figure>\n<p>结果： 正确跳出了多层循环<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808010928_686.png\" alt=\"mark\"></p>\n<h2 id=\"最后总结：\"><a href=\"#最后总结：\" class=\"headerlink\" title=\"最后总结：\"></a>最后总结：</h2><ol>\n<li>break只能在for、for…in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；</li>\n<li>return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"一-跳出一层循环\"><a href=\"#一-跳出一层循环\" class=\"headerlink\" title=\"一.跳出一层循环\"></a>一.跳出一层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>];</div></pre></td></tr></table></figure>\n<h3 id=\"结束for循环\"><a href=\"#结束for循环\" class=\"headerlink\" title=\"结束for循环\"></a>结束for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i],i);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环外'</span>);</div></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h3 id=\"结束forEach循环\"><a href=\"#结束forEach循环\" class=\"headerlink\" title=\"结束forEach循环\"></a>结束forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    arr.forEach(<span class=\"function\">(<span class=\"params\">o,i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"EndIterative\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(o,i);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.message!=<span class=\"string\">'EndIterative'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环体外'</span>);</div></pre></td></tr></table></figure>","more":"<p>注意：return 只能结束本次循环，并不能终止整个循环</p>\n<h3 id=\"结束for…in循环\"><a href=\"#结束for…in循环\" class=\"headerlink\" title=\"结束for…in循环\"></a>结束for…in循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i],i);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环体外'</span>);</div></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img src=\"http://or87vteh1.bkt.clouddn.com/201807311448_240.png\" alt=\"mark\"></p>\n<h2 id=\"二-跳出多层循环\"><a href=\"#二-跳出多层循环\" class=\"headerlink\" title=\"二.跳出多层循环\"></a>二.跳出多层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],[<span class=\"string\">\"小红\"</span>, <span class=\"string\">\"小明\"</span>, <span class=\"string\">\"小亮\"</span>]];</div></pre></td></tr></table></figure>\n<h3 id=\"正常多层for循环\"><a href=\"#正常多层for循环\" class=\"headerlink\" title=\"正常多层for循环\"></a>正常多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"循环体外\"</span>);</div></pre></td></tr></table></figure>\n<p>#####结果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808010918_525.png\" alt=\"mark\"></p>\n<h3 id=\"使用break\"><a href=\"#使用break\" class=\"headerlink\" title=\"使用break\"></a>使用break</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(j==i)&#123;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果： 只跳出了一层循环</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/201807311606_181.png\" alt=\"mark\"></p>\n<h3 id=\"我们可以使用以下方法跳出多层for循环\"><a href=\"#我们可以使用以下方法跳出多层for循环\" class=\"headerlink\" title=\"我们可以使用以下方法跳出多层for循环\"></a>我们可以使用以下方法跳出多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">          flag = <span class=\"literal\">true</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果： 只执行了一次j=0就结束了循环<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808010928_686.png\" alt=\"mark\"></p>\n<h3 id=\"使用return\"><a href=\"#使用return\" class=\"headerlink\" title=\"使用return\"></a>使用return</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(arr[i][j], <span class=\"string\">'内层'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i], <span class=\"string\">\"外层\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'我在循环体外'</span>);</div></pre></td></tr></table></figure>\n<p>结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/201807311646_81.png\" alt=\"mark\"></p>\n<h3 id=\"跳出多层forEach循环\"><a href=\"#跳出多层forEach循环\" class=\"headerlink\" title=\"跳出多层forEach循环\"></a>跳出多层forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    arr.forEach(<span class=\"function\">(<span class=\"params\">newArr,i</span>) =&gt;</span> &#123;</div><div class=\"line\">        newArr.forEach(<span class=\"function\">(<span class=\"params\">o,j</span>)=&gt;</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"EndIterative\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(o,<span class=\"string\">'内层'</span>)</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(newArr,<span class=\"string\">'外层'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.message!=<span class=\"string\">\"EndIterative\"</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'循环体外'</span>);</div></pre></td></tr></table></figure>\n<p>结果： 正确跳出了多层循环<br><img src=\"http://or87vteh1.bkt.clouddn.com/201808010928_686.png\" alt=\"mark\"></p>\n<h2 id=\"最后总结：\"><a href=\"#最后总结：\" class=\"headerlink\" title=\"最后总结：\"></a>最后总结：</h2><ol>\n<li>break只能在for、for…in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；</li>\n<li>return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。</li>\n</ol>"},{"title":"css3伪类选择器nth-child和nth-of-type的区别","author":"熊 超","date":"2017-06-10T08:35:00.000Z","_content":"---\n### 使用误区\n\n之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。\n\n\n### 1.用法效果相同的情况\n\n#### 示例一：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n\n<!-- more -->\n\n要实现的效果：将two变红\n\n>* nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n\n>* nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/hl1lJccBCj.png?imageslim)\n\n在同辈元素都相同的情况下两个用法效果一样\n\n### 2.用法相同效果不同的情况\n\n#### 示例二：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim)\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/h346LeKK59.png?imageslim)\n\n### 3.用法不同效果相同的情况\n\n#### 示例三：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(3){color:red;}\n\n```\n\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim)\n\n\n### 用法总结\n从以上三个示例可以看出：\n- 1.在所有子元素都相同的情况下，两种用法效果相同；\n- 2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；","source":"_posts/ss3伪类选择器nth-child和nth-of-type的区别.md","raw":"title: css3伪类选择器nth-child和nth-of-type的区别\nauthor: 熊 超\ntags:\n  - css\n  - 伪类选择器\ncategories:\n  - javascript\ndate: 2017-06-10 16:35:00\n---\n---\n### 使用误区\n\n之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。\n\n\n### 1.用法效果相同的情况\n\n#### 示例一：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n\n<!-- more -->\n\n要实现的效果：将two变红\n\n>* nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n\n>* nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/hl1lJccBCj.png?imageslim)\n\n在同辈元素都相同的情况下两个用法效果一样\n\n### 2.用法相同效果不同的情况\n\n#### 示例二：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim)\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/h346LeKK59.png?imageslim)\n\n### 3.用法不同效果相同的情况\n\n#### 示例三：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(3){color:red;}\n\n```\n\n效果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim)\n\n\n### 用法总结\n从以上三个示例可以看出：\n- 1.在所有子元素都相同的情况下，两种用法效果相同；\n- 2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；","slug":"ss3伪类选择器nth-child和nth-of-type的区别","published":1,"updated":"2018-08-08T10:08:30.023Z","_id":"cjkkvi5nl000ii0nfglf8ikmp","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h3 id=\"使用误区\"><a href=\"#使用误区\" class=\"headerlink\" title=\"使用误区\"></a>使用误区</h3><p>之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。</p>\n<h3 id=\"1-用法效果相同的情况\"><a href=\"#1-用法效果相同的情况\" class=\"headerlink\" title=\"1.用法效果相同的情况\"></a>1.用法效果相同的情况</h3><h4 id=\"示例一：\"><a href=\"#示例一：\" class=\"headerlink\" title=\"示例一：\"></a>示例一：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># HTML代码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>要实现的效果：将two变红</p>\n<blockquote>\n<ul>\n<li>nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/hl1lJccBCj.png?imageslim\" alt=\"mark\"></p>\n<p>在同辈元素都相同的情况下两个用法效果一样</p>\n<h3 id=\"2-用法相同效果不同的情况\"><a href=\"#2-用法相同效果不同的情况\" class=\"headerlink\" title=\"2.用法相同效果不同的情况\"></a>2.用法相同效果不同的情况</h3><h4 id=\"示例二：\"><a href=\"#示例二：\" class=\"headerlink\" title=\"示例二：\"></a>示例二：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># HTML代码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim\" alt=\"mark\"></p>\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/h346LeKK59.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"3-用法不同效果相同的情况\"><a href=\"#3-用法不同效果相同的情况\" class=\"headerlink\" title=\"3.用法不同效果相同的情况\"></a>3.用法不同效果相同的情况</h3><h4 id=\"示例三：\"><a href=\"#示例三：\" class=\"headerlink\" title=\"示例三：\"></a>示例三：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># HTML代码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"用法总结\"><a href=\"#用法总结\" class=\"headerlink\" title=\"用法总结\"></a>用法总结</h3><p>从以上三个示例可以看出：</p>\n<ul>\n<li>1.在所有子元素都相同的情况下，两种用法效果相同；</li>\n<li>2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<hr>\n<h3 id=\"使用误区\"><a href=\"#使用误区\" class=\"headerlink\" title=\"使用误区\"></a>使用误区</h3><p>之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。</p>\n<h3 id=\"1-用法效果相同的情况\"><a href=\"#1-用法效果相同的情况\" class=\"headerlink\" title=\"1.用法效果相同的情况\"></a>1.用法效果相同的情况</h3><h4 id=\"示例一：\"><a href=\"#示例一：\" class=\"headerlink\" title=\"示例一：\"></a>示例一：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># HTML代码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>","more":"<p>要实现的效果：将two变红</p>\n<blockquote>\n<ul>\n<li>nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/hl1lJccBCj.png?imageslim\" alt=\"mark\"></p>\n<p>在同辈元素都相同的情况下两个用法效果一样</p>\n<h3 id=\"2-用法相同效果不同的情况\"><a href=\"#2-用法相同效果不同的情况\" class=\"headerlink\" title=\"2.用法相同效果不同的情况\"></a>2.用法相同效果不同的情况</h3><h4 id=\"示例二：\"><a href=\"#示例二：\" class=\"headerlink\" title=\"示例二：\"></a>示例二：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># HTML代码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim\" alt=\"mark\"></p>\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/h346LeKK59.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"3-用法不同效果相同的情况\"><a href=\"#3-用法不同效果相同的情况\" class=\"headerlink\" title=\"3.用法不同效果相同的情况\"></a>3.用法不同效果相同的情况</h3><h4 id=\"示例三：\"><a href=\"#示例三：\" class=\"headerlink\" title=\"示例三：\"></a>示例三：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># HTML代码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type(2)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">CSS</span></div><div class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123;<span class=\"attribute\">color</span>:red;&#125;</div></pre></td></tr></table></figure>\n<p>效果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170610/5kG378GEBE.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"用法总结\"><a href=\"#用法总结\" class=\"headerlink\" title=\"用法总结\"></a>用法总结</h3><p>从以上三个示例可以看出：</p>\n<ul>\n<li>1.在所有子元素都相同的情况下，两种用法效果相同；</li>\n<li>2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；</li>\n</ul>"},{"title":"使用gulp自动化构建前端项目","author":"熊 超","date":"2017-07-09T02:30:00.000Z","_content":"---\n\n### gulp简介：\n&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br/>\n\n&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。\n\n<!--more-->\n\n### 环境搭建：\n\n#### 1.安装nodeJS\n1.gulp是基于nodejs，所以需要安装nodejs。   \n2.自己去node官网下载nodejs安装。\n\n#### 2.npm工具\n##### 说明：\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；\n\n##### 使用npm安装插件：npm install &lt;name&gt; [-g] [--save-dev]；  \n1.name: node插件名称。例：npm install gulp-sass --save-dev；\n\n2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  \n\n3.--save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；\n\n4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；\n\n#### 3.安装gulp\n1.npm install gulp -g；\n\n#### 4.新建package.json文件\n\n1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170709/1BEACEhcE9.png?imageslim)\n\n\n#### 5.新建gulpfile.js文件\n1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件\n2.新建gulpfile.js文件示例  \n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');\nvar minifycss = require('gulp-minify-css');//压缩css插件\nvar cleancss = require('gulp-clean-css');//压缩css插件\n \n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')); //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n \ngulp.task('default',['sass']); //定义默认任务\n \n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n#### 6.运行gulp\n1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。  \n2.gulp default: 如果定义了默认任务gulp.task('default',['sass'])可直接执行gulp命令。\n\n\n### &ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。","source":"_posts/使用gulp自动化构建前端项目.md","raw":"title: 使用gulp自动化构建前端项目\nauthor: 熊 超\ntags:\n  - gulp\ncategories:\n  - 工具\ndate: 2017-07-09 10:30:00\n---\n---\n\n### gulp简介：\n&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br/>\n\n&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。\n\n<!--more-->\n\n### 环境搭建：\n\n#### 1.安装nodeJS\n1.gulp是基于nodejs，所以需要安装nodejs。   \n2.自己去node官网下载nodejs安装。\n\n#### 2.npm工具\n##### 说明：\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；\n\n##### 使用npm安装插件：npm install &lt;name&gt; [-g] [--save-dev]；  \n1.name: node插件名称。例：npm install gulp-sass --save-dev；\n\n2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  \n\n3.--save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；\n\n4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；\n\n#### 3.安装gulp\n1.npm install gulp -g；\n\n#### 4.新建package.json文件\n\n1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170709/1BEACEhcE9.png?imageslim)\n\n\n#### 5.新建gulpfile.js文件\n1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件\n2.新建gulpfile.js文件示例  \n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');\nvar minifycss = require('gulp-minify-css');//压缩css插件\nvar cleancss = require('gulp-clean-css');//压缩css插件\n \n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')); //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n \ngulp.task('default',['sass']); //定义默认任务\n \n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n#### 6.运行gulp\n1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。  \n2.gulp default: 如果定义了默认任务gulp.task('default',['sass'])可直接执行gulp命令。\n\n\n### &ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。","slug":"使用gulp自动化构建前端项目","published":1,"updated":"2018-08-08T10:08:47.162Z","_id":"cjkkvi5nn000mi0nft0u3jy78","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h3 id=\"gulp简介：\"><a href=\"#gulp简介：\" class=\"headerlink\" title=\"gulp简介：\"></a>gulp简介：</h3><p>&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br></p>\n<p>&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>\n<a id=\"more\"></a>\n<h3 id=\"环境搭建：\"><a href=\"#环境搭建：\" class=\"headerlink\" title=\"环境搭建：\"></a>环境搭建：</h3><h4 id=\"1-安装nodeJS\"><a href=\"#1-安装nodeJS\" class=\"headerlink\" title=\"1.安装nodeJS\"></a>1.安装nodeJS</h4><p>1.gulp是基于nodejs，所以需要安装nodejs。<br>2.自己去node官网下载nodejs安装。</p>\n<h4 id=\"2-npm工具\"><a href=\"#2-npm工具\" class=\"headerlink\" title=\"2.npm工具\"></a>2.npm工具</h4><h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p>\n<h5 id=\"使用npm安装插件：npm-install-lt-name-gt-g-–save-dev-；\"><a href=\"#使用npm安装插件：npm-install-lt-name-gt-g-–save-dev-；\" class=\"headerlink\" title=\"使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；\"></a>使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；</h5><p>1.name: node插件名称。例：npm install gulp-sass –save-dev；</p>\n<p>2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  </p>\n<p>3.–save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；</p>\n<p>4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；</p>\n<h4 id=\"3-安装gulp\"><a href=\"#3-安装gulp\" class=\"headerlink\" title=\"3.安装gulp\"></a>3.安装gulp</h4><p>1.npm install gulp -g；</p>\n<h4 id=\"4-新建package-json文件\"><a href=\"#4-新建package-json文件\" class=\"headerlink\" title=\"4.新建package.json文件\"></a>4.新建package.json文件</h4><p>1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>\n<p>2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170709/1BEACEhcE9.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"5-新建gulpfile-js文件\"><a href=\"#5-新建gulpfile-js文件\" class=\"headerlink\" title=\"5.新建gulpfile.js文件\"></a>5.新建gulpfile.js文件</h4><p>1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件<br>2.新建gulpfile.js文件示例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入工具包 require('node_modules里对应模块')</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>);<span class=\"comment\">//压缩css插件</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass()) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(cleancss(&#123;</div><div class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></div><div class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></div><div class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)); <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'sass'</span>]); <span class=\"comment\">//定义默认任务</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></div><div class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></div><div class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-运行gulp\"><a href=\"#6-运行gulp\" class=\"headerlink\" title=\"6.运行gulp\"></a>6.运行gulp</h4><p>1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。<br>2.gulp default: 如果定义了默认任务gulp.task(‘default’,[‘sass’])可直接执行gulp命令。</p>\n<h3 id=\"ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"><a href=\"#ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\" class=\"headerlink\" title=\"&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"></a>&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。</h3>","site":{"data":{}},"excerpt":"<hr>\n<h3 id=\"gulp简介：\"><a href=\"#gulp简介：\" class=\"headerlink\" title=\"gulp简介：\"></a>gulp简介：</h3><p>&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br></p>\n<p>&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>","more":"<h3 id=\"环境搭建：\"><a href=\"#环境搭建：\" class=\"headerlink\" title=\"环境搭建：\"></a>环境搭建：</h3><h4 id=\"1-安装nodeJS\"><a href=\"#1-安装nodeJS\" class=\"headerlink\" title=\"1.安装nodeJS\"></a>1.安装nodeJS</h4><p>1.gulp是基于nodejs，所以需要安装nodejs。<br>2.自己去node官网下载nodejs安装。</p>\n<h4 id=\"2-npm工具\"><a href=\"#2-npm工具\" class=\"headerlink\" title=\"2.npm工具\"></a>2.npm工具</h4><h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p>\n<h5 id=\"使用npm安装插件：npm-install-lt-name-gt-g-–save-dev-；\"><a href=\"#使用npm安装插件：npm-install-lt-name-gt-g-–save-dev-；\" class=\"headerlink\" title=\"使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；\"></a>使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；</h5><p>1.name: node插件名称。例：npm install gulp-sass –save-dev；</p>\n<p>2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  </p>\n<p>3.–save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；</p>\n<p>4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；</p>\n<h4 id=\"3-安装gulp\"><a href=\"#3-安装gulp\" class=\"headerlink\" title=\"3.安装gulp\"></a>3.安装gulp</h4><p>1.npm install gulp -g；</p>\n<h4 id=\"4-新建package-json文件\"><a href=\"#4-新建package-json文件\" class=\"headerlink\" title=\"4.新建package.json文件\"></a>4.新建package.json文件</h4><p>1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>\n<p>2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170709/1BEACEhcE9.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"5-新建gulpfile-js文件\"><a href=\"#5-新建gulpfile-js文件\" class=\"headerlink\" title=\"5.新建gulpfile.js文件\"></a>5.新建gulpfile.js文件</h4><p>1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件<br>2.新建gulpfile.js文件示例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入工具包 require('node_modules里对应模块')</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>);<span class=\"comment\">//压缩css插件</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass()) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(cleancss(&#123;</div><div class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></div><div class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></div><div class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)); <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'sass'</span>]); <span class=\"comment\">//定义默认任务</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></div><div class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></div><div class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-运行gulp\"><a href=\"#6-运行gulp\" class=\"headerlink\" title=\"6.运行gulp\"></a>6.运行gulp</h4><p>1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。<br>2.gulp default: 如果定义了默认任务gulp.task(‘default’,[‘sass’])可直接执行gulp命令。</p>\n<h3 id=\"ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"><a href=\"#ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\" class=\"headerlink\" title=\"&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"></a>&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。</h3>"},{"title":"使用gulp插件快速开发项目","author":"熊 超","date":"2017-07-15T16:15:00.000Z","_content":"---\n## 简介：\n&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。\n\n\n## 1.gulpfile.js基本配置示例：\n&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。\n\n<!--more-->\n\n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');//将scss文件编译成浏览器可识别的css\nvar minifycss = require('gulp-minify-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar cleancss = require('gulp-clean-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar livereload = require('gulp-livereload');//监听文件发生变化时，浏览器自动刷新页面\nvar babel = require('gulp-babel');//将ES6编译成ES5\nvar uglify = require('gulp-uglify');//压缩js\nvar autoprefixer = require('gulp-autoprefixer');//根据设置浏览器版本自动处理浏览器前缀\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n        .pipe(livereload());//监听文件发生变化时，浏览器自动刷新页面\n});\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(livereload())//监听文件发生变化时，浏览器自动刷新页面\n        .pipe(uglify({ //压缩js\n            // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n            // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\ngulp.task('auto', function () {\n    gulp.watch('./sass/**/*.scss', ['sass']);\n    gulp.watch('./src/**/*.js', ['babel']);\n    // livereload.listen();\n});\n \ngulp.task('default',['sass','auto','babel']); //定义默认任务\n\n// 通配符路径匹配示例：\n// “src/a.js”：指定具体文件；\n// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；\n// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；\n// “{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；\n// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；\n\n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n### 配置文件详解：\n#### 执行一个任务分三步走：\n1.导入工具包 require('node_modules里对应模块')  \n```js\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\n```\n\n2.定义一个任务（自定义任务名称）  \n```js   \ngulp.task('test', function () {\n  gulp.src('./sass/**/*.scss') //该任务针对的文件\n      .pipe(test())\n      .pipe(gulp.dest('./css')) //将会在css文件夹下生成.css文件（复制文件目录及文件）\n})\n```\n3.执行任务：   \ncmd命令提示符 \n```\ngulp test\n\n```\n##### 如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\n```\ngulp.task('auto', function () {\n    gulp.watch('./src/**/*.js', ['test']);\n});\ngulp.task('default',['auto','test']); //定义默认任务\n\n```\n这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。\n\n\n## 2.使用gulp编译css\n\n### 1.gulp-sass的使用：\n\n#### 1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n\n#### 2.本地安转：npm install gulp-less --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入sass工具包\nvar sass = require('gulp-sass');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n        outputStyle: 'compact'  //代码风格\n      // nested：嵌套缩进的css代码，它是默认值。\n      // expanded：没有缩进的、扩展的css代码。\n      // compact：简洁格式的css代码。\n      // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.sass使用示例：\n\n```css\n$blue : #1875e7;　\n.class {\n    font-size: 12px;\n}\n.main{\n    color:$blue;\n    @if 1 + 1 == 2 { \n        border: 1px solid red;\n    }@if 5 < 3 { \n        border: 2px dotted blue; \n    }\n    .parent{\n        margin-left:10px + 20px;\n        &:hover{\n            cursor: pointer;\n            @extend .class;\n        }\n    }\n}\n\n```\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n\n#### 5.编译结果：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/IaCJglCfag.png?imageslim)\n\n### 2.gulp-minify-css的使用：\n\n#### 1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存  \n\n\n#### 2.本地安转：npm install gulp-minify-css --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar minifycss = require('gulp-minify-css');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(minifycss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/GCLHfi4haD.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/CHD62jD9kd.png?imageslim)\n编译之后的css文件被压缩了\n\n### 3.gulp-autoprefixer：\n\n#### 1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\n\n\n#### 2.本地安转：npm install gulp-autoprefixer --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar autoprefixer = require('gulp-autoprefixer');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/lhl9ajJEIA.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n浏览器中的编译结果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/IKCG8CDh46.png?imageslim)\n\n\n## 3.使用gulp编译js\n\n### 1.gulp-babel的使用：\n\n#### 1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\n\n#### 2.本地安转：\n1.npm install gulp-babel --save-dev  \n2.npm install babel-preset-es2015 --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入babel工具包\nvar less = require('gulp-babel');\n\n//定义一个babel任务（自定义任务名称）\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/Hbd5lihjCL.png?imageslim)\n\n\n### 2.gulp-uglify的使用：\n\n#### 1.介绍：压缩js代码\n\n#### 2.本地安转： npm install gulp-uglify --save-dev  \n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入uglify工具包\nvar uglify = require('gulp-uglify');\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(uglify({ //压缩js\n         // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n         // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/7Kg8hi0Jla.png?imageslim)\n\n\n### gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\n\n","source":"_posts/使用gulp插件快速开发项目.md","raw":"title: 使用gulp插件快速开发项目\nauthor: 熊 超\ntags:\n  - gulp\ncategories:\n  - 工具\ndate: 2017-07-16 00:15:00\n---\n---\n## 简介：\n&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。\n\n\n## 1.gulpfile.js基本配置示例：\n&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。\n\n<!--more-->\n\n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');//将scss文件编译成浏览器可识别的css\nvar minifycss = require('gulp-minify-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar cleancss = require('gulp-clean-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar livereload = require('gulp-livereload');//监听文件发生变化时，浏览器自动刷新页面\nvar babel = require('gulp-babel');//将ES6编译成ES5\nvar uglify = require('gulp-uglify');//压缩js\nvar autoprefixer = require('gulp-autoprefixer');//根据设置浏览器版本自动处理浏览器前缀\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n        .pipe(livereload());//监听文件发生变化时，浏览器自动刷新页面\n});\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(livereload())//监听文件发生变化时，浏览器自动刷新页面\n        .pipe(uglify({ //压缩js\n            // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n            // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\ngulp.task('auto', function () {\n    gulp.watch('./sass/**/*.scss', ['sass']);\n    gulp.watch('./src/**/*.js', ['babel']);\n    // livereload.listen();\n});\n \ngulp.task('default',['sass','auto','babel']); //定义默认任务\n\n// 通配符路径匹配示例：\n// “src/a.js”：指定具体文件；\n// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；\n// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；\n// “{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；\n// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；\n\n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n### 配置文件详解：\n#### 执行一个任务分三步走：\n1.导入工具包 require('node_modules里对应模块')  \n```js\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\n```\n\n2.定义一个任务（自定义任务名称）  \n```js   \ngulp.task('test', function () {\n  gulp.src('./sass/**/*.scss') //该任务针对的文件\n      .pipe(test())\n      .pipe(gulp.dest('./css')) //将会在css文件夹下生成.css文件（复制文件目录及文件）\n})\n```\n3.执行任务：   \ncmd命令提示符 \n```\ngulp test\n\n```\n##### 如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\n```\ngulp.task('auto', function () {\n    gulp.watch('./src/**/*.js', ['test']);\n});\ngulp.task('default',['auto','test']); //定义默认任务\n\n```\n这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。\n\n\n## 2.使用gulp编译css\n\n### 1.gulp-sass的使用：\n\n#### 1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n\n#### 2.本地安转：npm install gulp-less --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入sass工具包\nvar sass = require('gulp-sass');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n        outputStyle: 'compact'  //代码风格\n      // nested：嵌套缩进的css代码，它是默认值。\n      // expanded：没有缩进的、扩展的css代码。\n      // compact：简洁格式的css代码。\n      // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.sass使用示例：\n\n```css\n$blue : #1875e7;　\n.class {\n    font-size: 12px;\n}\n.main{\n    color:$blue;\n    @if 1 + 1 == 2 { \n        border: 1px solid red;\n    }@if 5 < 3 { \n        border: 2px dotted blue; \n    }\n    .parent{\n        margin-left:10px + 20px;\n        &:hover{\n            cursor: pointer;\n            @extend .class;\n        }\n    }\n}\n\n```\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n\n#### 5.编译结果：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/IaCJglCfag.png?imageslim)\n\n### 2.gulp-minify-css的使用：\n\n#### 1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存  \n\n\n#### 2.本地安转：npm install gulp-minify-css --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar minifycss = require('gulp-minify-css');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(minifycss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/GCLHfi4haD.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/CHD62jD9kd.png?imageslim)\n编译之后的css文件被压缩了\n\n### 3.gulp-autoprefixer：\n\n#### 1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\n\n\n#### 2.本地安转：npm install gulp-autoprefixer --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar autoprefixer = require('gulp-autoprefixer');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/lhl9ajJEIA.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n浏览器中的编译结果：\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170715/IKCG8CDh46.png?imageslim)\n\n\n## 3.使用gulp编译js\n\n### 1.gulp-babel的使用：\n\n#### 1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\n\n#### 2.本地安转：\n1.npm install gulp-babel --save-dev  \n2.npm install babel-preset-es2015 --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入babel工具包\nvar less = require('gulp-babel');\n\n//定义一个babel任务（自定义任务名称）\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/Hbd5lihjCL.png?imageslim)\n\n\n### 2.gulp-uglify的使用：\n\n#### 1.介绍：压缩js代码\n\n#### 2.本地安转： npm install gulp-uglify --save-dev  \n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入uglify工具包\nvar uglify = require('gulp-uglify');\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(uglify({ //压缩js\n         // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n         // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://or87vteh1.bkt.clouddn.com/blog/170716/7Kg8hi0Jla.png?imageslim)\n\n\n### gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\n\n","slug":"使用gulp插件快速开发项目","published":1,"updated":"2018-08-08T10:08:41.610Z","_id":"cjkkvi5np000oi0nf7qma23ua","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。</p>\n<h2 id=\"1-gulpfile-js基本配置示例：\"><a href=\"#1-gulpfile-js基本配置示例：\" class=\"headerlink\" title=\"1.gulpfile.js基本配置示例：\"></a>1.gulpfile.js基本配置示例：</h2><p>&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入工具包 require('node_modules里对应模块')</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);<span class=\"comment\">//将scss文件编译成浏览器可识别的css</span></div><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></div><div class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>);<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></div><div class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);<span class=\"comment\">//将ES6编译成ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);<span class=\"comment\">//压缩js</span></div><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);<span class=\"comment\">//根据设置浏览器版本自动处理浏览器前缀</span></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass()) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(cleancss(&#123;</div><div class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></div><div class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></div><div class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(autoprefixer(&#123;</div><div class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>],</div><div class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></div><div class=\"line\">            remove:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">        .pipe(livereload());<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'babel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./src/**/*.js'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(babel(&#123;</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(livereload())<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></div><div class=\"line\">        .pipe(uglify(&#123; <span class=\"comment\">//压缩js</span></div><div class=\"line\">            <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></div><div class=\"line\">            <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./js'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.watch(<span class=\"string\">'./sass/**/*.scss'</span>, [<span class=\"string\">'sass'</span>]);</div><div class=\"line\">    gulp.watch(<span class=\"string\">'./src/**/*.js'</span>, [<span class=\"string\">'babel'</span>]);</div><div class=\"line\">    <span class=\"comment\">// livereload.listen();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'sass'</span>,<span class=\"string\">'auto'</span>,<span class=\"string\">'babel'</span>]); <span class=\"comment\">//定义默认任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通配符路径匹配示例：</span></div><div class=\"line\"><span class=\"comment\">// “src/a.js”：指定具体文件；</span></div><div class=\"line\"><span class=\"comment\">// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；</span></div><div class=\"line\"><span class=\"comment\">// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；</span></div><div class=\"line\"><span class=\"comment\">// “&#123;&#125;”：匹配多个属性    例：src/&#123;a,b&#125;.js(包含a.js和b.js文件)  src/*.&#123;jpg,png,gif&#125;(src下的所有jpg/png/gif文件)；</span></div><div class=\"line\"><span class=\"comment\">// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></div><div class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></div><div class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置文件详解：\"><a href=\"#配置文件详解：\" class=\"headerlink\" title=\"配置文件详解：\"></a>配置文件详解：</h3><h4 id=\"执行一个任务分三步走：\"><a href=\"#执行一个任务分三步走：\" class=\"headerlink\" title=\"执行一个任务分三步走：\"></a>执行一个任务分三步走：</h4><p>1.导入工具包 require(‘node_modules里对应模块’)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></div></pre></td></tr></table></figure></p>\n<p>2.定义一个任务（自定义任务名称）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">      .pipe(test())</div><div class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成.css文件（复制文件目录及文件）</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>3.执行任务：<br>cmd命令提示符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp test</div></pre></td></tr></table></figure></p>\n<h5 id=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"><a href=\"#如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\" class=\"headerlink\" title=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"></a>如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;auto&apos;, function () &#123;</div><div class=\"line\">    gulp.watch(&apos;./src/**/*.js&apos;, [&apos;test&apos;]);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;,[&apos;auto&apos;,&apos;test&apos;]); //定义默认任务</div></pre></td></tr></table></figure>\n<p>这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。</p>\n<h2 id=\"2-使用gulp编译css\"><a href=\"#2-使用gulp编译css\" class=\"headerlink\" title=\"2.使用gulp编译css\"></a>2.使用gulp编译css</h2><h3 id=\"1-gulp-sass的使用：\"><a href=\"#1-gulp-sass的使用：\" class=\"headerlink\" title=\"1.gulp-sass的使用：\"></a>1.gulp-sass的使用：</h3><h4 id=\"1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"><a href=\"#1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\" class=\"headerlink\" title=\"1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"></a>1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</h4><h4 id=\"2-本地安转：npm-install-gulp-less-–save-dev\"><a href=\"#2-本地安转：npm-install-gulp-less-–save-dev\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-less –save-dev\"></a>2.本地安转：npm install gulp-less –save-dev</h4><h4 id=\"3-配置gulpfile-js\"><a href=\"#3-配置gulpfile-js\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入sass工具包</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass(&#123;</div><div class=\"line\">        <span class=\"attr\">outputStyle</span>: <span class=\"string\">'compact'</span>  <span class=\"comment\">//代码风格</span></div><div class=\"line\">      <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></div><div class=\"line\">      <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></div><div class=\"line\">      <span class=\"comment\">// compact：简洁格式的css代码。</span></div><div class=\"line\">      <span class=\"comment\">// compressed：压缩后的css代码。</span></div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2.sass使用示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$blue : #1875e7;　</div><div class=\"line\">.class &#123;</div><div class=\"line\">    font-size: 12px;</div><div class=\"line\">&#125;</div><div class=\"line\">.main&#123;</div><div class=\"line\">    color:$blue;</div><div class=\"line\">    @if 1 + 1 == 2 &#123; </div><div class=\"line\">        border: 1px solid red;</div><div class=\"line\">    &#125;@if 5 &lt; 3 &#123; </div><div class=\"line\">        border: 2px dotted blue; </div><div class=\"line\">    &#125;</div><div class=\"line\">    .parent&#123;</div><div class=\"line\">        margin-left:10px + 20px;</div><div class=\"line\">        &amp;:hover&#123;</div><div class=\"line\">            cursor: pointer;</div><div class=\"line\">            @extend .class;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-执行任务：\"><a href=\"#4-执行任务：\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：\"><a href=\"#5-编译结果：\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/IaCJglCfag.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"2-gulp-minify-css的使用：\"><a href=\"#2-gulp-minify-css的使用：\" class=\"headerlink\" title=\"2.gulp-minify-css的使用：\"></a>2.gulp-minify-css的使用：</h3><h4 id=\"1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"><a href=\"#1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\" class=\"headerlink\" title=\"1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"></a>1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</h4><h4 id=\"2-本地安转：npm-install-gulp-minify-css-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-minify-css-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-minify-css –save-dev。\"></a>2.本地安转：npm install gulp-minify-css –save-dev。</h4><h4 id=\"3-配置gulpfile-js-1\"><a href=\"#3-配置gulpfile-js-1\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass(&#123;</div><div class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">'compact'</span>  <span class=\"comment\">//代码风格</span></div><div class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></div><div class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(minifycss(&#123;</div><div class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></div><div class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></div><div class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.使用示例：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/GCLHfi4haD.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-1\"><a href=\"#4-执行任务：-1\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-1\"><a href=\"#5-编译结果：-1\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/CHD62jD9kd.png?imageslim\" alt=\"mark\"><br>编译之后的css文件被压缩了</p>\n<h3 id=\"3-gulp-autoprefixer：\"><a href=\"#3-gulp-autoprefixer：\" class=\"headerlink\" title=\"3.gulp-autoprefixer：\"></a>3.gulp-autoprefixer：</h3><h4 id=\"1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\"><a href=\"#1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\" class=\"headerlink\" title=\"1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\"></a>1.插件介绍：根据设置浏览器版本自动处理浏览器前缀</h4><h4 id=\"2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-autoprefixer –save-dev。\"></a>2.本地安转：npm install gulp-autoprefixer –save-dev。</h4><h4 id=\"3-配置gulpfile-js-2\"><a href=\"#3-配置gulpfile-js-2\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass(&#123;</div><div class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">'compact'</span>  <span class=\"comment\">//代码风格</span></div><div class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></div><div class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(autoprefixer(&#123;</div><div class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>],</div><div class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></div><div class=\"line\">            remove:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.使用示例：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/lhl9ajJEIA.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-2\"><a href=\"#4-执行任务：-2\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-2\"><a href=\"#5-编译结果：-2\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p>浏览器中的编译结果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/IKCG8CDh46.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"3-使用gulp编译js\"><a href=\"#3-使用gulp编译js\" class=\"headerlink\" title=\"3.使用gulp编译js\"></a>3.使用gulp编译js</h2><h3 id=\"1-gulp-babel的使用：\"><a href=\"#1-gulp-babel的使用：\" class=\"headerlink\" title=\"1.gulp-babel的使用：\"></a>1.gulp-babel的使用：</h3><h4 id=\"1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"><a href=\"#1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\" class=\"headerlink\" title=\"1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"></a>1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范</h4><h4 id=\"2-本地安转：\"><a href=\"#2-本地安转：\" class=\"headerlink\" title=\"2.本地安转：\"></a>2.本地安转：</h4><p>1.npm install gulp-babel –save-dev<br>2.npm install babel-preset-es2015 –save-dev</p>\n<h4 id=\"3-配置gulpfile-js-3\"><a href=\"#3-配置gulpfile-js-3\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入babel工具包</span></div><div class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）</span></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'babel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./src/**/*.js'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(babel(&#123;</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./js'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2.ES6使用示例：</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-3\"><a href=\"#4-执行任务：-3\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-3\"><a href=\"#5-编译结果：-3\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/Hbd5lihjCL.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"2-gulp-uglify的使用：\"><a href=\"#2-gulp-uglify的使用：\" class=\"headerlink\" title=\"2.gulp-uglify的使用：\"></a>2.gulp-uglify的使用：</h3><h4 id=\"1-介绍：压缩js代码\"><a href=\"#1-介绍：压缩js代码\" class=\"headerlink\" title=\"1.介绍：压缩js代码\"></a>1.介绍：压缩js代码</h4><h4 id=\"2-本地安转：-npm-install-gulp-uglify-–save-dev\"><a href=\"#2-本地安转：-npm-install-gulp-uglify-–save-dev\" class=\"headerlink\" title=\"2.本地安转： npm install gulp-uglify –save-dev\"></a>2.本地安转： npm install gulp-uglify –save-dev</h4><h4 id=\"3-配置gulpfile-js-4\"><a href=\"#3-配置gulpfile-js-4\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入uglify工具包</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'babel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./src/**/*.js'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(babel(&#123;</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(uglify(&#123; <span class=\"comment\">//压缩js</span></div><div class=\"line\">         <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></div><div class=\"line\">         <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./js'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2.ES6使用示例：</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-4\"><a href=\"#4-执行任务：-4\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-4\"><a href=\"#5-编译结果：-4\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/7Kg8hi0Jla.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"><a href=\"#gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\" class=\"headerlink\" title=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"></a>gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。</h3>","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。</p>\n<h2 id=\"1-gulpfile-js基本配置示例：\"><a href=\"#1-gulpfile-js基本配置示例：\" class=\"headerlink\" title=\"1.gulpfile.js基本配置示例：\"></a>1.gulpfile.js基本配置示例：</h2><p>&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入工具包 require('node_modules里对应模块')</span></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);<span class=\"comment\">//将scss文件编译成浏览器可识别的css</span></div><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></div><div class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>);<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></div><div class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);<span class=\"comment\">//将ES6编译成ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);<span class=\"comment\">//压缩js</span></div><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);<span class=\"comment\">//根据设置浏览器版本自动处理浏览器前缀</span></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass()) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(cleancss(&#123;</div><div class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></div><div class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></div><div class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(autoprefixer(&#123;</div><div class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>],</div><div class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></div><div class=\"line\">            remove:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">        .pipe(livereload());<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'babel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./src/**/*.js'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(babel(&#123;</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(livereload())<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></div><div class=\"line\">        .pipe(uglify(&#123; <span class=\"comment\">//压缩js</span></div><div class=\"line\">            <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></div><div class=\"line\">            <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./js'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'auto'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.watch(<span class=\"string\">'./sass/**/*.scss'</span>, [<span class=\"string\">'sass'</span>]);</div><div class=\"line\">    gulp.watch(<span class=\"string\">'./src/**/*.js'</span>, [<span class=\"string\">'babel'</span>]);</div><div class=\"line\">    <span class=\"comment\">// livereload.listen();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'sass'</span>,<span class=\"string\">'auto'</span>,<span class=\"string\">'babel'</span>]); <span class=\"comment\">//定义默认任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通配符路径匹配示例：</span></div><div class=\"line\"><span class=\"comment\">// “src/a.js”：指定具体文件；</span></div><div class=\"line\"><span class=\"comment\">// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；</span></div><div class=\"line\"><span class=\"comment\">// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；</span></div><div class=\"line\"><span class=\"comment\">// “&#123;&#125;”：匹配多个属性    例：src/&#123;a,b&#125;.js(包含a.js和b.js文件)  src/*.&#123;jpg,png,gif&#125;(src下的所有jpg/png/gif文件)；</span></div><div class=\"line\"><span class=\"comment\">// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></div><div class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></div><div class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置文件详解：\"><a href=\"#配置文件详解：\" class=\"headerlink\" title=\"配置文件详解：\"></a>配置文件详解：</h3><h4 id=\"执行一个任务分三步走：\"><a href=\"#执行一个任务分三步走：\" class=\"headerlink\" title=\"执行一个任务分三步走：\"></a>执行一个任务分三步走：</h4><p>1.导入工具包 require(‘node_modules里对应模块’)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></div></pre></td></tr></table></figure></p>\n<p>2.定义一个任务（自定义任务名称）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">      .pipe(test())</div><div class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成.css文件（复制文件目录及文件）</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>3.执行任务：<br>cmd命令提示符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp test</div></pre></td></tr></table></figure></p>\n<h5 id=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"><a href=\"#如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\" class=\"headerlink\" title=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"></a>如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;auto&apos;, function () &#123;</div><div class=\"line\">    gulp.watch(&apos;./src/**/*.js&apos;, [&apos;test&apos;]);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;,[&apos;auto&apos;,&apos;test&apos;]); //定义默认任务</div></pre></td></tr></table></figure>\n<p>这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。</p>\n<h2 id=\"2-使用gulp编译css\"><a href=\"#2-使用gulp编译css\" class=\"headerlink\" title=\"2.使用gulp编译css\"></a>2.使用gulp编译css</h2><h3 id=\"1-gulp-sass的使用：\"><a href=\"#1-gulp-sass的使用：\" class=\"headerlink\" title=\"1.gulp-sass的使用：\"></a>1.gulp-sass的使用：</h3><h4 id=\"1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"><a href=\"#1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\" class=\"headerlink\" title=\"1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"></a>1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</h4><h4 id=\"2-本地安转：npm-install-gulp-less-–save-dev\"><a href=\"#2-本地安转：npm-install-gulp-less-–save-dev\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-less –save-dev\"></a>2.本地安转：npm install gulp-less –save-dev</h4><h4 id=\"3-配置gulpfile-js\"><a href=\"#3-配置gulpfile-js\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入sass工具包</span></div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass(&#123;</div><div class=\"line\">        <span class=\"attr\">outputStyle</span>: <span class=\"string\">'compact'</span>  <span class=\"comment\">//代码风格</span></div><div class=\"line\">      <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></div><div class=\"line\">      <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></div><div class=\"line\">      <span class=\"comment\">// compact：简洁格式的css代码。</span></div><div class=\"line\">      <span class=\"comment\">// compressed：压缩后的css代码。</span></div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2.sass使用示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$blue : #1875e7;　</div><div class=\"line\">.class &#123;</div><div class=\"line\">    font-size: 12px;</div><div class=\"line\">&#125;</div><div class=\"line\">.main&#123;</div><div class=\"line\">    color:$blue;</div><div class=\"line\">    @if 1 + 1 == 2 &#123; </div><div class=\"line\">        border: 1px solid red;</div><div class=\"line\">    &#125;@if 5 &lt; 3 &#123; </div><div class=\"line\">        border: 2px dotted blue; </div><div class=\"line\">    &#125;</div><div class=\"line\">    .parent&#123;</div><div class=\"line\">        margin-left:10px + 20px;</div><div class=\"line\">        &amp;:hover&#123;</div><div class=\"line\">            cursor: pointer;</div><div class=\"line\">            @extend .class;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-执行任务：\"><a href=\"#4-执行任务：\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：\"><a href=\"#5-编译结果：\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/IaCJglCfag.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"2-gulp-minify-css的使用：\"><a href=\"#2-gulp-minify-css的使用：\" class=\"headerlink\" title=\"2.gulp-minify-css的使用：\"></a>2.gulp-minify-css的使用：</h3><h4 id=\"1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"><a href=\"#1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\" class=\"headerlink\" title=\"1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"></a>1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</h4><h4 id=\"2-本地安转：npm-install-gulp-minify-css-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-minify-css-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-minify-css –save-dev。\"></a>2.本地安转：npm install gulp-minify-css –save-dev。</h4><h4 id=\"3-配置gulpfile-js-1\"><a href=\"#3-配置gulpfile-js-1\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass(&#123;</div><div class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">'compact'</span>  <span class=\"comment\">//代码风格</span></div><div class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></div><div class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(minifycss(&#123;</div><div class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></div><div class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></div><div class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.使用示例：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/GCLHfi4haD.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-1\"><a href=\"#4-执行任务：-1\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-1\"><a href=\"#5-编译结果：-1\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/CHD62jD9kd.png?imageslim\" alt=\"mark\"><br>编译之后的css文件被压缩了</p>\n<h3 id=\"3-gulp-autoprefixer：\"><a href=\"#3-gulp-autoprefixer：\" class=\"headerlink\" title=\"3.gulp-autoprefixer：\"></a>3.gulp-autoprefixer：</h3><h4 id=\"1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\"><a href=\"#1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\" class=\"headerlink\" title=\"1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\"></a>1.插件介绍：根据设置浏览器版本自动处理浏览器前缀</h4><h4 id=\"2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-autoprefixer –save-dev。\"></a>2.本地安转：npm install gulp-autoprefixer –save-dev。</h4><h4 id=\"3-配置gulpfile-js-2\"><a href=\"#3-配置gulpfile-js-2\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./sass/**/*.scss'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(sass(&#123;</div><div class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">'compact'</span>  <span class=\"comment\">//代码风格</span></div><div class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></div><div class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></div><div class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(autoprefixer(&#123;</div><div class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>],</div><div class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></div><div class=\"line\">            remove:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./css'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.使用示例：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/lhl9ajJEIA.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-2\"><a href=\"#4-执行任务：-2\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-2\"><a href=\"#5-编译结果：-2\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p>浏览器中的编译结果：<br><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170715/IKCG8CDh46.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"3-使用gulp编译js\"><a href=\"#3-使用gulp编译js\" class=\"headerlink\" title=\"3.使用gulp编译js\"></a>3.使用gulp编译js</h2><h3 id=\"1-gulp-babel的使用：\"><a href=\"#1-gulp-babel的使用：\" class=\"headerlink\" title=\"1.gulp-babel的使用：\"></a>1.gulp-babel的使用：</h3><h4 id=\"1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"><a href=\"#1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\" class=\"headerlink\" title=\"1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"></a>1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范</h4><h4 id=\"2-本地安转：\"><a href=\"#2-本地安转：\" class=\"headerlink\" title=\"2.本地安转：\"></a>2.本地安转：</h4><p>1.npm install gulp-babel –save-dev<br>2.npm install babel-preset-es2015 –save-dev</p>\n<h4 id=\"3-配置gulpfile-js-3\"><a href=\"#3-配置gulpfile-js-3\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入babel工具包</span></div><div class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）</span></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'babel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./src/**/*.js'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(babel(&#123;</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./js'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2.ES6使用示例：</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-3\"><a href=\"#4-执行任务：-3\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-3\"><a href=\"#5-编译结果：-3\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/Hbd5lihjCL.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"2-gulp-uglify的使用：\"><a href=\"#2-gulp-uglify的使用：\" class=\"headerlink\" title=\"2.gulp-uglify的使用：\"></a>2.gulp-uglify的使用：</h3><h4 id=\"1-介绍：压缩js代码\"><a href=\"#1-介绍：压缩js代码\" class=\"headerlink\" title=\"1.介绍：压缩js代码\"></a>1.介绍：压缩js代码</h4><h4 id=\"2-本地安转：-npm-install-gulp-uglify-–save-dev\"><a href=\"#2-本地安转：-npm-install-gulp-uglify-–save-dev\" class=\"headerlink\" title=\"2.本地安转： npm install gulp-uglify –save-dev\"></a>2.本地安转： npm install gulp-uglify –save-dev</h4><h4 id=\"3-配置gulpfile-js-4\"><a href=\"#3-配置gulpfile-js-4\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//导入uglify工具包</span></div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'babel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./src/**/*.js'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(babel(&#123;</div><div class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(uglify(&#123; <span class=\"comment\">//压缩js</span></div><div class=\"line\">         <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></div><div class=\"line\">         <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./js'</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2.ES6使用示例：</p>\n<p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/LBLjFGhFF5.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"4-执行任务：-4\"><a href=\"#4-执行任务：-4\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-4\"><a href=\"#5-编译结果：-4\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img src=\"http://or87vteh1.bkt.clouddn.com/blog/170716/7Kg8hi0Jla.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"><a href=\"#gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\" class=\"headerlink\" title=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"></a>gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。</h3>"},{"title":"Jquery Dom元素Index()方法的使用","author":"熊 超","keywords":"index jquery","date":"2017-06-10T04:30:00.000Z","_content":"------\n\n### 前言\n作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。\n\n### jquery获取元素索引值index()方法使用误区\n\n\n\n由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释\"//这里不知道为什么总是多了2，但其他页面又是正常的\"，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。\n\n### jquery获取元素索引值index()方法作用\n\n<!--more-->\n\n#### 用法一：$(select).index();\n> * 示例一：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n```\n```js\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 0\n});\n\n```\n\n\n\n这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二\n\n> * 示例二：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n \n```\n```JavaScript\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 1\n});\n\n```\n从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置\n\n#### 用法二：$(select1).index(select2);\n> * 示例：\n\n```HTML\n# html代码:\n<p class=\"box\">Tea</p>\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\" id=\"box2\">Tea</div>\n  <div class=\"box\">Coffee</div>\n</div>\n\n```\n```js\n# js代码:\n$(\".box\").index($(\"#box2\"));//结果: 2\n\n```\n\n通过这个示例可以看出**$(select1).index(select2)**的用法是选择器**select2**相对于选择器**select1**的位置索引，跟同辈元素和其父辈元素都无关。\n\n### 总结\n\n虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。","source":"_posts/Jquery-Dom元素Index-方法的使用.md","raw":"title: Jquery Dom元素Index()方法的使用\nauthor: 熊 超\ntags:\n  - jquery\ncategories:\n  - javascript\nkeywords: index jquery\ndate: 2017-06-10 12:30:00\n---\n------\n\n### 前言\n作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。\n\n### jquery获取元素索引值index()方法使用误区\n\n\n\n由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释\"//这里不知道为什么总是多了2，但其他页面又是正常的\"，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。\n\n### jquery获取元素索引值index()方法作用\n\n<!--more-->\n\n#### 用法一：$(select).index();\n> * 示例一：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n```\n```js\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 0\n});\n\n```\n\n\n\n这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二\n\n> * 示例二：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n \n```\n```JavaScript\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 1\n});\n\n```\n从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置\n\n#### 用法二：$(select1).index(select2);\n> * 示例：\n\n```HTML\n# html代码:\n<p class=\"box\">Tea</p>\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\" id=\"box2\">Tea</div>\n  <div class=\"box\">Coffee</div>\n</div>\n\n```\n```js\n# js代码:\n$(\".box\").index($(\"#box2\"));//结果: 2\n\n```\n\n通过这个示例可以看出**$(select1).index(select2)**的用法是选择器**select2**相对于选择器**select1**的位置索引，跟同辈元素和其父辈元素都无关。\n\n### 总结\n\n虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。","slug":"Jquery-Dom元素Index-方法的使用","published":1,"updated":"2018-08-08T10:07:59.662Z","_id":"cjkkvi5ns000si0nfhtghpc5c","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。</p>\n<h3 id=\"jquery获取元素索引值index-方法使用误区\"><a href=\"#jquery获取元素索引值index-方法使用误区\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法使用误区\"></a>jquery获取元素索引值index()方法使用误区</h3><p>由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释”//这里不知道为什么总是多了2，但其他页面又是正常的”，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。</p>\n<h3 id=\"jquery获取元素索引值index-方法作用\"><a href=\"#jquery获取元素索引值index-方法作用\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法作用\"></a>jquery获取元素索引值index()方法作用</h3><a id=\"more\"></a>\n<h4 id=\"用法一：-select-index\"><a href=\"#用法一：-select-index\" class=\"headerlink\" title=\"用法一：$(select).index();\"></a>用法一：$(select).index();</h4><blockquote>\n<ul>\n<li>示例一：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html代码:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># js代码：</div><div class=\"line\">$(\".box\").on(\"click\",function()&#123;</div><div class=\"line\">  $(this).index();//结果：如果点击的Milk则返回 0</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二</p>\n<blockquote>\n<ul>\n<li>示例二：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html代码:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># js代码：</div><div class=\"line\">$(\".box\").on(\"click\",function()&#123;</div><div class=\"line\">  $(this).index();//结果：如果点击的Milk则返回 1</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置</p>\n<h4 id=\"用法二：-select1-index-select2\"><a href=\"#用法二：-select1-index-select2\" class=\"headerlink\" title=\"用法二：$(select1).index(select2);\"></a>用法二：$(select1).index(select2);</h4><blockquote>\n<ul>\n<li>示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html代码:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box2\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># js代码:</div><div class=\"line\">$(\".box\").index($(\"#box2\"));//结果: 2</div></pre></td></tr></table></figure>\n<p>通过这个示例可以看出<strong>$(select1).index(select2)</strong>的用法是选择器<strong>select2</strong>相对于选择器<strong>select1</strong>的位置索引，跟同辈元素和其父辈元素都无关。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。</p>\n","site":{"data":{}},"excerpt":"<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。</p>\n<h3 id=\"jquery获取元素索引值index-方法使用误区\"><a href=\"#jquery获取元素索引值index-方法使用误区\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法使用误区\"></a>jquery获取元素索引值index()方法使用误区</h3><p>由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释”//这里不知道为什么总是多了2，但其他页面又是正常的”，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。</p>\n<h3 id=\"jquery获取元素索引值index-方法作用\"><a href=\"#jquery获取元素索引值index-方法作用\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法作用\"></a>jquery获取元素索引值index()方法作用</h3>","more":"<h4 id=\"用法一：-select-index\"><a href=\"#用法一：-select-index\" class=\"headerlink\" title=\"用法一：$(select).index();\"></a>用法一：$(select).index();</h4><blockquote>\n<ul>\n<li>示例一：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html代码:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># js代码：</div><div class=\"line\">$(\".box\").on(\"click\",function()&#123;</div><div class=\"line\">  $(this).index();//结果：如果点击的Milk则返回 0</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二</p>\n<blockquote>\n<ul>\n<li>示例二：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html代码:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># js代码：</div><div class=\"line\">$(\".box\").on(\"click\",function()&#123;</div><div class=\"line\">  $(this).index();//结果：如果点击的Milk则返回 1</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置</p>\n<h4 id=\"用法二：-select1-index-select2\"><a href=\"#用法二：-select1-index-select2\" class=\"headerlink\" title=\"用法二：$(select1).index(select2);\"></a>用法二：$(select1).index(select2);</h4><blockquote>\n<ul>\n<li>示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html代码:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box2\"</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># js代码:</div><div class=\"line\">$(\".box\").index($(\"#box2\"));//结果: 2</div></pre></td></tr></table></figure>\n<p>通过这个示例可以看出<strong>$(select1).index(select2)</strong>的用法是选择器<strong>select2</strong>相对于选择器<strong>select1</strong>的位置索引，跟同辈元素和其父辈元素都无关。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkkvi5mr0000i0nfw17yn1zd","category_id":"cjkkvi5n60004i0nfh7upmzms","_id":"cjkkvi5ng000di0nf4k949avv"},{"post_id":"cjkkvi5n00002i0nfk1gcn19m","category_id":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkywo9p0001hsnfsttceycg"},{"post_id":"cjkkvi5ns000si0nfhtghpc5c","category_id":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkz1bx40001wwnf2cq01qzs"},{"post_id":"cjkkvi5nb0007i0nfkzehw9bf","category_id":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkz1bxf0003wwnfwierm62r"},{"post_id":"cjkkvi5nc0008i0nfigsx5ey2","category_id":"cjkkz1bww0000wwnfnm5191sd","_id":"cjkkz1bxh0005wwnfy1e8zq3t"},{"post_id":"cjkkvi5nl000ii0nfglf8ikmp","category_id":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkz1bxp0007wwnfnhgy36r6"},{"post_id":"cjkkvi5n90006i0nf7fef4ubp","category_id":"cjkkz1bxb0002wwnf13qflowf","_id":"cjkkz1bxq0008wwnf4plpefn0"},{"post_id":"cjkkvi5nj000hi0nf1j5oynt4","category_id":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkz1bxr0009wwnfbtrch0l2"},{"post_id":"cjkkvi5np000oi0nf7qma23ua","category_id":"cjkkz1bxb0002wwnf13qflowf","_id":"cjkkz1bxs000awwnfgxrlntrt"},{"post_id":"cjkkvi5nf000ci0nfpmw2nt4s","category_id":"cjkkvi5nd0009i0nfjp20oe96","_id":"cjkkz1bxs000bwwnfshb89591"},{"post_id":"cjkkvi5nn000mi0nft0u3jy78","category_id":"cjkkz1bxb0002wwnf13qflowf","_id":"cjkkz1bxw000dwwnftcuyg21c"},{"post_id":"cjkkvi5nh000ei0nfkf64fj5p","category_id":"cjkkz2bu2000gwwnf6c3rd5o3","_id":"cjkkz3rz3000mwwnfk7pncu7t"}],"PostTag":[{"post_id":"cjkkvi5mr0000i0nfw17yn1zd","tag_id":"cjkkvi5n90005i0nff7qx1wxi","_id":"cjkkvi5ne000bi0nfppv3c8na"},{"post_id":"cjkkvi5n90006i0nf7fef4ubp","tag_id":"cjkkvi5nm000li0nf9povwxza","_id":"cjkkvi5nu000ti0nf7hik3wkh"},{"post_id":"cjkkvi5nb0007i0nfkzehw9bf","tag_id":"cjkkvi5nr000ri0nffzsi9ets","_id":"cjkkvi5o1000yi0nf217ehz92"},{"post_id":"cjkkvi5nb0007i0nfkzehw9bf","tag_id":"cjkkvi5nx000vi0nfhjcjxedm","_id":"cjkkvi5o30010i0nfgw2w2dqo"},{"post_id":"cjkkvi5nc0008i0nfigsx5ey2","tag_id":"cjkkvi5o0000xi0nf8z8pw4jc","_id":"cjkkvi5o50012i0nf4yy30lcv"},{"post_id":"cjkkvi5nf000ci0nfpmw2nt4s","tag_id":"cjkkvi5nr000ri0nffzsi9ets","_id":"cjkkvi5o90017i0nf54cudqb6"},{"post_id":"cjkkvi5nf000ci0nfpmw2nt4s","tag_id":"cjkkvi5o70014i0nffxtbmvs8","_id":"cjkkvi5oa001ai0nf96dise1i"},{"post_id":"cjkkvi5nj000hi0nf1j5oynt4","tag_id":"cjkkvi5o70014i0nffxtbmvs8","_id":"cjkkvi5om001ui0nfmdz5ecio"},{"post_id":"cjkkvi5nj000hi0nf1j5oynt4","tag_id":"cjkkvi5oj001ni0nf8pvnrq5k","_id":"cjkkvi5on001wi0nfa4njowo1"},{"post_id":"cjkkvi5nl000ii0nfglf8ikmp","tag_id":"cjkkvi5ol001ti0nfedl6i1xm","_id":"cjkkvi5or0022i0nfs4ghajef"},{"post_id":"cjkkvi5nl000ii0nfglf8ikmp","tag_id":"cjkkvi5on001xi0nfb6xa5trj","_id":"cjkkvi5os0024i0nfazrhbaui"},{"post_id":"cjkkvi5nn000mi0nft0u3jy78","tag_id":"cjkkvi5oq0021i0nf55pj66o6","_id":"cjkkvi5ot0027i0nfj37zklqn"},{"post_id":"cjkkvi5np000oi0nf7qma23ua","tag_id":"cjkkvi5oq0021i0nf55pj66o6","_id":"cjkkvi5ou002ai0nf5l3z0lsv"},{"post_id":"cjkkvi5ns000si0nfhtghpc5c","tag_id":"cjkkvi5ou0028i0nf9s7cv2s8","_id":"cjkkvi5ox002fi0nfx4k3r95w"},{"post_id":"cjkkvi5n00002i0nfk1gcn19m","tag_id":"cjkkvi5nd000ai0nfg92dsb1d","_id":"cjkkywo9o0000hsnf5frmgzlk"},{"post_id":"cjkkvi5n00002i0nfk1gcn19m","tag_id":"cjkkvi5nj000gi0nfr48gs9y1","_id":"cjkkywo9q0002hsnf6pxdrkb5"},{"post_id":"cjkkvi5nh000ei0nfkf64fj5p","tag_id":"cjkkvi5o70014i0nffxtbmvs8","_id":"cjkkz2vi9000iwwnfp2v36shr"},{"post_id":"cjkkvi5nh000ei0nfkf64fj5p","tag_id":"cjkkvi5oc001ci0nfixaw779d","_id":"cjkkz2vib000kwwnf5hatx4s0"}],"Tag":[{"name":"Markdown","_id":"cjkkvi5n90005i0nff7qx1wxi"},{"name":"sessionStorage","_id":"cjkkvi5nd000ai0nfg92dsb1d"},{"name":"localStorage","_id":"cjkkvi5nj000gi0nfr48gs9y1"},{"name":"git","_id":"cjkkvi5nm000li0nf9povwxza"},{"name":"js","_id":"cjkkvi5nr000ri0nffzsi9ets"},{"name":"date","_id":"cjkkvi5nx000vi0nfhjcjxedm"},{"name":"upload","_id":"cjkkvi5o0000xi0nf8z8pw4jc"},{"name":"Array","_id":"cjkkvi5o70014i0nffxtbmvs8"},{"name":"sort","_id":"cjkkvi5oc001ci0nfixaw779d"},{"name":"算法","_id":"cjkkvi5oe001ei0nf6fm38cd0"},{"name":"循环","_id":"cjkkvi5oj001ni0nf8pvnrq5k"},{"name":"css","_id":"cjkkvi5ol001ti0nfedl6i1xm"},{"name":"伪类选择器","_id":"cjkkvi5on001xi0nfb6xa5trj"},{"name":"gulp","_id":"cjkkvi5oq0021i0nf55pj66o6"},{"name":"jquery","_id":"cjkkvi5ou0028i0nf9s7cv2s8"}]}}